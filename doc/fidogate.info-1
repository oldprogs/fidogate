This is Info file fidogate.info, produced by Makeinfo-1.55 from the
input file fidogate.texi.

   This file documents the usage of FIDOGATE version 3.9.6

   Copyright (C) 1994-1995, Martin Junius

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into other languages, under the above conditions for modified
versions.


File: fidogate.info,  Node: Top,  Next: Introduction,  Up: (DIR)

Introduction
************

This manual documents how to install and use FIDOGATE. It is the first
step toward a concise documentation. Alas, writing documentation is a
somewhat tedious business, so this manual is far from complete.

* Menu:

* Introduction::Introduction to FIDOGATE
* Installation::Compiling and installing FIDOGATE
* Programs::    FIDOGATE programs and scripts
* Config files::FIDOGATE config files
* Basic::       Basic configuration

* Index::       Index

 -- The Detailed Node Listing --

Compiling and installing FIDOGATE

* Point::       Installing a FIDOGATE point system
* config.h::    The `config.h' header file
* config.make:: The `config.make' Makefile configuration
* Compiling::   Compiling and installing FIDOGATE
* Integration:: Integrating FIDOGATE and the mail/news system
* Testing::     Testing FIDOGATE operation
* Connecting::  Connecting to FIDONET

FIDOGATE Programs

* ffx::         Remote execution via FIDO mailer
* ffxbatch::    Remove execution via FIDO mailer - batched
* ffxmail::     `ffx' frontend for sending mail
* ffxqt::       Execute `ffx' requests
* ffxrmail::    `rmail' command for `ffxqt'
* ffxrun::      Script for running `ffxqt'
* ftn2ftn::     FTN-FTN NetMail gateway
* ftn2rfc::     FTN-Internet mail/news gateway
* ftnaf::       Areafix
* ftnbounce::   Bounce mail to unknown FTN address
* ftnbsy::      Create/delete Binkley busy files
* ftnhatch::    Hatch new file into file
* ftnin::       Frontend for `ftn2rfc'
* ftninpost::   Mail/news processing script
* ftninrecomb:: Mail/news recombining script
* ftnlock::     Create/delete lock files
* ftnlog::      Write message to log file
* ftnpack::     Pack (ArcMail) FTN mail packets
* ftnroute::    Route FTN mail packets
* ftnseq::      Access sequencer file
* ftntick::     Process incoming file echos
* ftntoss::     Toss/remap/rewrite FTN mail packets
* out-attach::  Binkley outbound file attach utility
* pktdebug::    FTN mail packet debugger
* rfc2ftn::     Internet-FTN gateway
* rundf::       Script for checking free disk space
* runin::       Script for processing inbound packets
* runout::      Script for processing gateway output packets
* runtoss::     Script for running tosser
* rununpack::   Script for unpacking arcmail archives
* sumcrc::      CRC checksum utility

FIDOGATE Config Files

* Config::      `config.*' configuration files
* Hosts::       `hosts' FTN address to host name conversion
* Aliases::     `aliases' user aliases
* Areas::       `areas' FTN area to newsgroup conversion
* Bounce::      Bounce messages of `ftn2rfc'
* Passwd::      `passwd' password config file
* Routing::     `routing' file for `ftntoss' and `ftnroute'
* Packing::     `packing' file for `ftnpack'
* Areas.bbs::   `areas.bbs' EchoMail distribution

Basic Configuration

* Example::       Example leaf node configuration


File: fidogate.info,  Node: Introduction,  Next: Installation,  Prev: Top,  Up: Top

Introduction to FIDOGATE
************************

FIDOGATE is a gateway software between the worlds of FIDO
NetMail/EchoMail (or FTNs, Fido Technology Networks in general) and the
UNIX mail/news system. FIDOGATE will convert FIDO mail packets to
RFC822-style messages and vice versa.  It is placed under the GNU
General Public License, see file COPYING for details.

   This version of FIDOGATE also includes a complete passthru FIDO mail
processor (NetMail/EchoMail scanner and tosser) and an Areafix-like
utility.

How to Get FIDOGATE
===================

The latest version of FIDOGATE is available at the following sites.

Internet anonymous ftp:
     ftp.comnets.rwth-aachen.de  (137.226.4.111)
     /pub/mail+news/fidogate-x.y.tar.gz

BBS and FIDO frequest:
     2:2452/110 242:1000/1 +49-241-875090  (HST/V.32bis)
     2:2452/111 242:1000/2 +49-241-8790420 (ISDN V.110/X.75)
     File area #51, file name fgatexy.tgz

Requirements for FIDOGATE:
==========================

   * Something that gets you FIDONET mail. If you want a FIDO mailer, I
     recommend using ifcico from Eugene Crosser's ifmail package.

   * Installed news system. (CNews or INN)

   * A new reader. (nn, tin, Emacs GNUS)

   * A mail transport agent. (sendmail or smail)

   * A mail user agent. (mail, elm, pine, Emacs)

FIDOGATE Mailing List
=====================

There is a mailing list for FIDOGATE discussions and announcements:
     fgate-users@gondor.gun.de

   For subscription send mail to
     fgate-users-request@gondor.gun.de

Credits
=======

   This stuff is a derived version of a posting called `rfmail' to
Usenet's alt.sources some time ago. I rewrote the entire code by now.

   The original `rfmail' authors were: Teemu Torma, who wrote the first
version, and Heikki Suonsivu, who did some changes and improvements and
posted version 0.3.3 to the net.

   Also used:

The parsedate.y date/time parser, from INN 1.4:
     Originally written by Steven M. Bellovin <smb@research.att.com> while
     at the University of North Carolina at Chapel Hill.  Later tweaked by
     a couple of people on Usenet.  Completely overhauled by Rich $alz
     <rsalz@osf.org> and Jim Berets <jberets@bbn.com> in August, 1990.
     Further revised (removed obsolete constructs and cleaned up timezone
     names) in August, 1991, by Rich.  Paul Eggert <eggert@twinsun.com>
     helped in September, 1992.
   (Changed slightly and adopted for FIDOGATE)

The xstrtok() function:
     16/10/1991      Wolfram Roesler         wr@bara.oche.de

GNU `getopt'.

The wildmat() function from GNU tar, modified and adopted for FIDOGATE.


File: fidogate.info,  Node: Installation,  Next: Point,  Prev: Introduction,  Up: Top

Compiling and installing FIDOGATE
*********************************

* Menu:

* Point::       Installing a FIDOGATE point system
* config.h::    The `config.h' header file
* config.make:: The `config.make' Makefile configuration
* Compiling::   Compiling and installing FIDOGATE
* Integration:: Integrating FIDOGATE and the mail/news system
* Testing::     Testing FIDOGATE operation
* Connecting::  Connecting to FIDONET

This chapter describes the FIDOGATE program configuration and
installation.  You must also edit the config files to be installed in
the LIBDIR directory. Change `config.common', `config.gate',
`config.main', `config.ffx', `areas', `hosts', `passwd', `routing',
`packing', `aliases', `maus' according to your setup (examples from my
configuration contained in the lib subdirectory).

   The chapter on config files describes them in detail.


File: fidogate.info,  Node: Point,  Next: config.h,  Prev: Installation,  Up: Installation

Installing a FIDGATE Point System
=================================

Hints for setting up a FIDOGATE point system without Internet mail
connectivity:

   * Choose a host name and a domain name. Since both won't be visible
     to the outside world, you may choose whatever you want.

   * Put the `NoFromLine' keyword into `config'!!!

   * Comment out `PASSTHRU_NETMAIL' and `PASSTHRU_ECHOMAIL' in
     `src/config.h'. These functions are not necessary for a point
     system and may cause trouble.

   * If you want to send Internet mail via a FIDO-Internet gateway, set
     it's address with `Gateway' in `config.gate'. FIDOGATE can then be
     used as your default mailer, delivering all non-FIDO mail to this
     gateway.

   Sample `lib/config.gate' settings for a point:

     hostname  mordor
     domain    .middle.earth
     address   2:2499/666.42
     uplink    2:2499/666
     nofromeline
     gateway   2:2476/2

   See also `doc/FidoPnt.txt' for a complete description (German!) on
how to install a point system on LINUX using FIDOGATE, ifcico, CNews,
and smail.

   If you have trouble with the `smail' installation (which seems to be
overly complicated for such a simple task), you may try `sendmail'
8.6.x (there is a simple to install LINUX binary available) and the
config files in the config/sendmail/v8/cf directory. This sendmail
version is the default MTA in the Slackware 2.1 distribution, too.


File: fidogate.info,  Node: config.h,  Next: config.make,  Prev: Point,  Up: Installation

The `src/config.h' Header File
==============================

Comment/uncomment/change the `#define's to suit your requirements.

Common configuration:

`HOSTS_RESTRICTED'
     Restrict the usage of the gateway to nodes registered in the
     `hosts' config file, e.g. only these node may send/receive mail
     to/from the Internet.

`LOCAL_FTN_ADDRESSES'
     Generate "local" FTN addresses: User_Name%p.f.n.z@hostname.domain
     instead of User_name@p.f.n.z.domain.

`DO_BSY_FILES'
     Create Binkley-style busy files while accessing the Binkley
     outbound.

`SECURE'
     Enable secure permissions for packet and data files.

`MAXMSGSIZE'
     Maximum size of FIDO messages generated by `rfc2ftn', larger
     messages will be split. Alas, less than 16K seems to be the only
     safe setting. This is the default value.

`FTN_INVALID_DOMAIN'
     Domain address to be used for invalid FTN addresses.

`ftn2rfc' configuration:

`FTN_JUNK'
     Specifies a default newsgroup for unknown (i.e. no entry in
     `areas') FTN areas.

`ERRORS_TO'
     Write `Errors-To' header to RFC message, causing error messages
     sent to the specified address, if the MTA supports this (`sendmail'
     does).

`ADD_DOMAIN'
     Add hostname.domain to local addresses, e.g. `To: mj' will be
     converted to `To: mj@sungate.fido.de'.

`ALIASES_ARE_LOCAL'
     Addresses found in the `aliases' config file are rewritten so that
     the sender's address is the gateway.

`CHARSET_DEFAULT_IBMPC'
     Make IBMPC the default char set (no `^ACHRS' kludge).

`rfc2ftn' configuration:

`PASSTHRU_NETMAIL'
     Passthru operation for NetMail: if the sender of the message is an
     FTN address, the origin address of the resulting FTN message will
     be that FTN address.

`PASSTHRU_ECHOMAIL'
     Passthru operation for EchoMail: if the sender of the message is
     an FTN address, this address will be put into the origin line of
     the resulting FTN message. If the RFC message contains an
     `X-FTN-Origin' header, this one will be used for the origin line.
     NOT YET IMPLEMENTED.

`FTN_4D_ECHOMAIL_WITH_POINTS'
     Generate EchoMail control lines with point addresses, e.g.
          SEEN-BY: 2452/110.1
          ^APATH: 2452/110.1
     If commented, the point address is left out. This only applies to a
     point setup with 4D EchoMail. Leaving this commented seems to be
     the best setting.

`FSC_0035'
     Generate `^AREPLYADDR', `^AREPLYTO' kludges according to FSC-0035.

`FSC_0047'
     Generate `^ASPLIT' kludge according to FSC-0047 for split messages.

`FTN_FORCE_INTL'
     Always generate a `^AINTL' kludge, even if sender and receiver are
     in the same default zone (first `Address' in `config').

`NO_CONTROL'
     Do not pass news control messages (newgroup, cancel, etc.) to the
     FTN side of the gateway.

System dependent configuration:

`DO_HAVE_GETTIMEOFDAY'
     Define, if the system has the gettimeofday() function.

`DO_HAVE_TM_GMTOFF'
     Define, if the system has a tm_gmtoff field in struct tm.

`DO_HAVE_TM_ZONE'
     Define, if the system has a tm_zone field in struct tm.

`DO_HAVE_STRFTIME'
     Define, if the system has the Standard-C strftime() function.

`DO_HAVE_TZNAME'
     Define, if the system has `extern char *tzname[2]'.

`DO_HAVE_STRCASECMP'
     Define, if the system has the `strcasecmp()' and `strncasecmp()'
     functions.

`DO_HAVE_STRICMP'
     Define, if the system has the `stricmp()' and `strnicmp()'
     functions.

`DO_BINARY'
     Define, if files must be opened in binary mode.

   Define only one of `DO_HAVE_TM_ZONE', `DO_HAVE_STRFTIME',
`DO_HAVE_TZNAME', and also only one of `DO_HAVE_STRCASECMP',
`DO_HAVE_STRICMP'.

   The following systems are recognized automatically: SunOS 4.1.x,
LINUX, Interactive UNIX, MSDOS with DJGPP gcc, OS/2 with EMX gcc.

THE FOLLOWING DEFINES SHOULD NORMALLY LEFT AS IS!!!

Message ID configuration:

`FIDODOMAIN'
     Default Internet domain for standard FIDO addresses (zone 1-6).
     Used for Message-IDs only, so DO NOT CHANGE.

`MSGID_ORIGID'
     Generate Gatebau '93 `^AORIGID', `^AORIGREF' kludges.

`MSGID_NEW_MSGID'
     Generate FTN MSGIDs according to the FIDO Gatebau '94
     recommendation (see doc/msgid.doc).

`MSGID_NEW_FTNID'
     Generate RFC Message-IDs for FTN messages according to the FIDO
     Gatebau '94 recommendation (MIME-style quoted printable).

Files and directories used by FIDOGATE:

`CONFIG_GATE'
`CONFIG_MAIN'
`CONFIG_FFX'
     Names of FIDOGATE config files.

`HOSTS'
     FTN addresses / host names registration config file.

`ALIASES'
     User aliases config file.

`AREAS'
     FTN area / newsgroup conversion config file.

`MAUS'
     MAUS domain list config file (OBSOLETE).

`PASSWD'
     Password config file.

`LOG'
     FIDOGATE default log file.

`SEQ_MAIL'
     Sequencer file used by `ftn2rfc' for mail messages.

`SEQ_NEWS'
     Sequencer file used by `ftn2rfc' for news messages.

`SEQ_MSGID'
     Sequencer file used by `rfc2ftn' for `^AMSGID's.

`SEQ_PKT'
     Sequencer file used by `rfc2ftn' for outbound packet names.

`SEQ_SPLIT'
     Sequencer file used by `rfc2ftn' for split messages number.

`SEQ_FF'
     Sequencer file used by `ffx' for control and data files.

`SEQ_TOSS'
     Sequencer file used by `ftntoss', `ftnroute' for output packet
     files.

`SEQ_PACK'
     Sequencer file used by `ftnpack' for packet names in arcmail
     archives.

`SEQ_MQ'
     Sequencer file used by `queuemail'. NOT YET IMPLEMENTED.

`SEQ_TICK'
     Sequencer file used by `ftnhatch' and `ftntick'.

`INDIR'
     Input directory for `ftn2rfc', relative to `SPOOLDIR'.

`INSECUREDIR'
     Insecure input directory for `ftn2rfc', relative to `SPOOLDIR'.

`INDIR_MAIL'
     Directory where `ftn2rfc' creates converted mail messages,
     relative to `SPOOLDIR/INDIR'.

`INDIR_NEWS'
     Directory where `ftn2rfc' creates converted news messages,
     relative to `SPOOLDIR/INDIR'.

`OUTDIR'
     Directory where `rfc2ftn' creates output packets, relative to
     `SPOOLDIR'.

`SEQ'
     Directory where FIDOGATE creates its sequencer files, relative to
     `SPOOLDIR'.

`LOCKS'
     Directory where lock files are created, relativ to `SPOOLDIR'.

`TOSS'
     Tosser top directory, relative to `SPOOLDIR'.

`TOSS_IN'
`TOSS_TMP'
`TOSS_OUT'
`TOSS_PACK'
     Tosser input, temporary, output, and arcmail packet directory,
     relative to `SPOOLDIR'. Used by `ftntoss', `ftnroute', `ftnpack'.

`QUEUE'
     Directory for queueing. NOT YET IMPLEMENTED.

`TICK_HOLD'
     Hold directory for TIC files, relative to OUTBOUND. Used by
     `ftnhatch' and `ftntick'.

`xxxx_MODE'
     Permissions for files processed by FIDOGATE.

`FTN_RFC_HEADERS'
     RFC headers recognized at the beginning of FTN messages.

Program constants, increase the MAX values if needed.

`xx_MODE'
     Modes (`fopen') for opening files.

`DATE_DEFAULT'
     Default date format string.

`DATE_NEWS'
     Date format string for news articles.

`DATE_MAIL'
     Date format string for mail.

`PRODUCT_CODE'
     FIDO product code used by `rfc2ftn'. Should be left as is (`0xfe').

`MAX_LINELEN'
     Maximum line length for formatting FIDO messages.

`MAXADDRESS'
     Maximum number of `Address' and `Zone' statements in `config' file.

`MAXDOSDRIVE'
     Maximum number of `DosDrive' statements in `config' file.

`MAXPATH'
     Maximum length of a pathname in FIDOGATE.

`MAXINETADDR'
     Maximum length of the address part of an Internet address in
     FIDOGATE.

`MAXUSERNAME'
     Maximum length of the user name part of an Internet address in
     FIDOGATE.

`MAXOPENFILES'
     Maximum number of packet files concurrently opened by tosser
     programs. The maximum possible value is operating system and
     configuration dependent, see UNIX ulimits.


File: fidogate.info,  Node: config.make,  Next: Compiling,  Prev: config.h,  Up: Installation

The `config.make' Makefile Configuration
========================================

This file is included in all FIDOGATE Makefiles (`src/Makefile',
`lib/Makefile', `lib/ffxqt-dir/Makefile', `util/Makefile'.
`doc/Makefile').

`SHELL'
     The shell for executing commands.

`BINDIR'
     The directory for user programs.

`LIBDIR'
     The directory for FIDOGATE's programs and config files.

`INFODIR'
     The directory for installing info files.

`SPOOLDIR'
     FIDOGATE's spool directory.

`LOGDIR'
     Directory for FIDOGATE log files.

`OUTBOUND'
     BinkleyTerm-style outbound base directory. Used by the perl and
     shell scripts. This is the base directory, not the actual zone
     outbound directory.

`INBOUND'
     BinkleyTerm-style inbound directory. Used by the perl and shell
     scripts.

`PINBOUND'
     BinkleyTerm-style protected inbound directory. Used by the perl and
     shell scripts.

`UUINBOUND'
     BinkleyTerm-style inbound directory for the `recvuu' script. Used
     by the perl and shell scripts.

`PERL'
     Full path name of perl executable.

`OWNER'
     Owner of FIDOGATE files.

`GROUP'
     Group of FIDOGATE files.

`PERM_PROG'
     Permissions for installing programs.

`PERM_DATA'
     Permissions for installing data files.

`PERM_SETUID'
     Permissions for installing setuid `OWNER' programs.

`PERM_DIR'
     Permissions for installing directories.

`CC'
     C compiler.

`YACC'
     `yacc' or a clone like `bison -y'.

`AR'
     `ar' monkey ... (@!#$%&... ouch!) ... librarian.

`RANLIB'
     Library utitility, if needed.

`DEBUG'
     Optimize or debugging flags for compiling.

`CFLAGS'
     Flags for compiling FIDOGATE.

`LFLAGS'
     Flags for linking FIDOGATE.

`LIBS'
     Libraries for linking FIDOGATE, including the FIDOGATE library
     `libfidogate.a'.

`INSTALL_PROG'
     Install command for installing programs.

`INSTALL_DATA'
     Install command for installing data files.

`INSTALL_SETUID'
     Install command for installing setuid programs.

`INSTALL_DIR'
     Install command for installing directories.

`LIB'
     Name of the FIDOGATE library.

   If the directories in `SPOOLDIR' are different from the default ones
in `config.h', the commands for the `install-dirs' target of
`src/Makefile' must be changed as well.


File: fidogate.info,  Node: Compiling,  Next: Integration,  Prev: config.make,  Up: Installation

Compiling and Installing FIDOGATE
=================================

After editing `config.h' and `config.make', `cd' to the `src'
directory, and have a look at `ftninpost.pl'. Most likely the variables
`$RELAY' (name of the FIDO side of the gateway), `$SENDMAIL' (MTA
command for mail), and `$RNEWS' (command for news) will need some
editing.

   You may also want to uncomment the line running the `ftninrecomb'
command in `ftninpost.pl' to enabled the recombining of split FIDO
messages to a single mail/posting.

   Then compile the beast by entering
     make

   Alternatively an optimized version can be compiled with
     make DEBUG=-O2

   If everything works, you must create the necessary directories:
     make install-dirs
   Then install all FIDOGATE programs:
     make install

   Next change to the lib directory. After editing the various config
files or creating them for scratch, install them:
     make install

   The `passwd' config file must be installed manually.


File: fidogate.info,  Node: Integration,  Next: Testing,  Prev: Compiling,  Up: Installation

Integrating FIDOGATE and the Mail/News System
=============================================

See the `config' directory for hints and config files for CNews, INN,
and sendmail. More documentation is included in the `doc' directory,
especially the `FIDOGATE-Point-HOWTO'. Most of it is written in German,
though.

`config/cnews'
     Configuration examples for CNews.

`config/ftnaf'
     Configuration examples for `ftnaf': MTA aliases, `areas.bbs'.

`config/inn'
     Configuration examples for INN.

`config/sendmail/v8'
     sendmail V8 configuration files (m4) and examples .mc files for
     FIDOGATE: Fido.DE domain gateway setup, point setup.

   Much more concise instructions should be here!!! ;-)


File: fidogate.info,  Node: Testing,  Next: Connecting,  Prev: Integration,  Up: Installation

Testing FIDOGATE Operation
==========================

`ftn2rfc'
---------

To verify proper operation of FIDOGATE, copy a FIDO mail packet to the
directory SPOOLDIR/in, then execute LIBDIR/ftn2rfc as user `OWNER'. Add
some `-v' options for verbose debug messages:
     libdir/ftn2rfc -vvvvv

   This should result in one or more files named `nnnnnnnn.msg' in the
directories SPOOLDIR/in/mail and SPOOLDIR/in/news. Check these files and
verify that they at least look like RFC headers. ;-)

   Next execute
     libdir/ftninpost
   this will feed those files to `rnews' and `sendmail'. After some
processing you should find the messages in your mail folder and/or
newsgroups.

`rfc2ftn'
---------

Grab a single news posting in a FIDO linked newsgroup and feed it to
`rfc2ftn':
     libdir/rfc2ftn -vvvvv -n <ARTICLE
   This should result in a FIDO mail packet `nnnnnnnn.pkt' in the
directory SPOOLDIR/out.

   Do the same with a mail message addressed to a FIDO recipient:
     libdir/rfc2ftn -vvvvv USER_NAME@FIDO.ADDRESS <MESSAGE
   Again you should get a packet `nnnnnnnn.pkt' in SPOOLDIR/out.

   If this is working and you have integrated FIDOGATE and mail/news,
you can try posting an article to a FIDO linked newsgroups and/or
mailing a message to a recipient on FIDONET.  The resulting packets
should be in SPOOLDIR/out.


File: fidogate.info,  Node: Connecting,  Next: Programs,  Prev: Testing,  Up: Installation

Connecting to FIDONET
=====================

FIDOGATE does NOT include a FIDO mailer, so you have to transfer FIDO
mail to and from the UNIX system by some other means.

   If you want everything running on the UNIX system, you need a FIDO
mailer for UNIX. To my knowledge there are two working FIDO mailers:
   * BinkleyTerm 3.02pl10

   * ifcico 2.x from Eugene Crosser's ifmail package

   The solution I'm using is a separate PC running DOS and BinkleyTerm
as a mailer. My system currently comprises a LINUX PC for the
gateway/tosser and NFS server, and 3 PCs running DOS. 2 of them are
running BinkleyTerm for the phone and ISDN lines. The BinkleyTerm
outbound is kept on the LINUX server, so all PCs and the gateway have
access to it.


File: fidogate.info,  Node: Programs,  Next: ffx,  Prev: Connecting,  Up: Top

FIDOGATE Programs
*****************

The current FIDOGATE distribution includes the following programs and
scripts:

* Menu:

* ffx::         Remote execution via FIDO mailer
* ffxbatch::    Remove execution via FIDO mailer - batched
* ffxmail::     `ffx' frontend for sending mail
* ffxqt::       Execute `ffx' requests
* ffxrmail::    `rmail' command for `ffxqt'
* ffxrun::      Script for running `ffxqt'
* ftn2ftn::     FTN-FTN NetMail gateway
* ftn2rfc::     FTN-Internet mail/news gateway
* ftnaf::       Areafix
* ftnbounce::   Bounce mail to unknown FTN address
* ftnbsy::      Create/delete Binkley busy files
* ftnhatch::    Hatch new file into file
* ftnin::       Frontend for `ftn2rfc'
* ftninpost::   Mail/news processing script
* ftninrecomb:: Mail/news recombining script
* ftnlock::     Create/delete lock files
* ftnlog::      Write message to log file
* ftnpack::     Pack (ArcMail) FTN mail packets
* ftnroute::    Route FTN mail packets
* ftnseq::      Access sequencer file
* ftntick::     Process incoming file echos
* ftntoss::     Toss/remap/rewrite FTN mail packets
* out-attach::  Binkley outbound file attach utility
* pktdebug::    FTN mail packet debugger
* rfc2ftn::     Internet-FTN gateway
* rundf::       Script for checking free disk space
* runin::       Script for processing inbound packets
* runout::      Script for processing gateway output packets
* runtoss::     Script for running tosser
* rununpack::   Script for unpacking arcmail archives
* sumcrc::      CRC checksum utility

   Almost all FIDOGATE programs support standard options, which aren't
listed in the following sections describing the individual programs:

`-v --verbose'
     Increase the verbosity/debug level.

`-h --help'
     Help on usage and options.

`-c --config name'
     Read an alternate config file. `""' means none. name may start
     with `%L/', indicating a file relative to LIBDIR.

`-L --lib-dir name'
     Set the FIDOGATE library directory (LIBDIR).

`-S --spool-dir name'
     Set the FIDOGATE spool directory (SPOOLDIR).

`-a --addr Z:N/F.P'
     Set the main address of this system.

`-u --uplink-addr Z:N/F.P'
     Set the uplink address (boss node) of this system.

   The option `-a' and `-u' also support Internet-style FTN addresses,
e.g. `p10.f110.n2452.z2'. If any of these options is specified, all
addresses from the config file are disabled.


File: fidogate.info,  Node: ffx,  Next: ffxbatch,  Prev: Programs,  Up: Programs

ffx -- Remote Execution via FIDO Mailer
=======================================

Usage:

     ffx  [-options]  Z:N/F.P  command

Options:

`-b --batch-dir dir'
     Operate in batch mode, using dir. Control and data files are not
     immediately appended to the node's FLO file, but rather written to
     a separate batch directory SPOOLDIR/out.ZZZ/dir. Implies `-n'.

`-B --binkley name'
     Set Binkley outbound directory.

`-F --flavor flavor'
     Set flavor of outbound FLO file: `Hold', `Normal', `Direct', or
     `Crash'.

`-g --grade grade'
     Set grade of control and data files to grade (single letter
     [a-z0-9]).

`-n --nocompression'
     Don't compress data files.

   The compression program (`gzip') and other are hardcoded in the
`ffx.c' source code.


File: fidogate.info,  Node: ffxbatch,  Next: ffxmail,  Prev: ffx,  Up: Programs

ffxbatch -- Batches Remote Executon via FIDO Mailer
===================================================

Usage:

     ffxbatch  [-options]  Z:N/F.P  command

Options:

`-b --batch-dir dir'
     Select batch directory as used by `ffx -b'dir. The files in this
     directory will be archived and transfered as a single `ffx'
     command.

`-B --binkley name'
     Set Binkley outbound directory.

`-F --flavor flavor'
     Set flavor of outbound FLO file: `Hold', `Normal', `Direct', or
     `Crash'.

`-g --grade grade'
     Set grade of control and data files to grade (single letter
     [a-z0-9]).

`-w --wait-bsy'
     Wait, if busy file for the node exists. Default: terminate, don't
     archive batched `ffx'-Jobs.

   The name of the archiving program (`zip') is hardcoded in the
`ffxbatch.c' source.


File: fidogate.info,  Node: ffxmail,  Next: ffxqt,  Prev: ffxbatch,  Up: Programs

ffxmail -- ffx Frontend for Sending Mail
========================================

Usage:

     ffxmail  Z:N/F.P  address ...

No options.

   `ffxmail' calls `ffx' in batch mode (`-b'), selecting the batch
directory from the node address. Modify the script (`src/ffxmail.sh')
for other addresses/batch directories.


File: fidogate.info,  Node: ffxqt,  Next: ffxrmail,  Prev: ffxmail,  Up: Programs

ffxqt -- Execute ffx Requests
=============================

Usage:

     ffxqt  [-options]

Options:

`-g  --grade grade'
     Process ffx jobs with grade only. grade must be a single letter.

`-I --inbound name'
     Select the input directory where the `f???????.ffx' control files
     are read from. Default: INBOUND

`-t --insecure'
     Process ffx files without password. Default: ffx file must contain
     a password.

   `ffxqt' searches the input directory for control files and executes
the requested commands. Commands are executed by running
LIBDIR/ffxqt-dir/command, so every allowed command must reside as a
script or symbolic link there.

   Some program/paths are hard coded in the `ffxqt.c' code.


File: fidogate.info,  Node: ffxrmail,  Next: ffxrun,  Prev: ffxqt,  Up: Programs

ffxrmail -- Script for Processing FFX `rmail' Commands
======================================================

Usage:

     ffxrun  [-v]

   Perl script to be called as `rmail' by `ffxqt'. This replaces
`/bin/rmail' (UUCP), calling `/usr/lib/sendmail' directly with
appropiate options.

   Installed as LIBDIR/ffxqt-dir/`rmail'.


File: fidogate.info,  Node: ffxrun,  Next: ftn2ftn,  Prev: ffxrmail,  Up: Programs

ffxrun -- Script for Running ffxqt
==================================

Usage:

     ffxrun  [ffxqt options]

   This script runs `ffxqt' twice (the second run for processing batch
archives unpacked by the first one). All command line arguments are
passed to `ffxqt'.


File: fidogate.info,  Node: ftn2ftn,  Next: ftn2rfc,  Prev: ffxrun,  Up: Programs

ftn2ftn -- FTN-FTN NetMail Gateway
==================================

Usage:

     ftn2ftn  [-options]  [packet ... ]

Options:

`-A --address-a Z:N/F.P'
     Set FTN address in network A.

`-B --address-b Z:N/F.P'
     Set FTN address in network B.

`-o --out-packet-file NAME'
     Set output packet file name.

`-O --out-packet-dir NAME'
     Set output packet directory.

   This program provides a NetMail gateway between different FTNs, using
the (somewhat) standard "User Name%Z:N/F.P" addressing in the FTN from
and to fields.

   If no packet is given on the command line, `ftn2ftn' looks for
packets addressed to the gateway addresses (A and B) in the Binkley
outbound. Both gateway addresses must be specified with the `-A' and
`-B' options.

   If a packet name is passed on the command line, `ftn2ftn' will gate
this to the other network A. The gateway address (sender of the mails
in network A) is set with `-A' option.


File: fidogate.info,  Node: ftn2rfc,  Next: ftnaf,  Prev: ftn2ftn,  Up: Programs

ftn2rfc -- FTN-Internet Gateway
===============================

Usage:

     ftn2rfc  [-options]  [packet ... ]

Options:

`-t --insecure'
     Operate in insecure mode. All messages containing a To line for
     gateway addressing will be bounced. Also sets the input directory
     to SPOOLDIR/insecure.

`-I --inbound-dir NAME'
     Set the input directory for FTN packets.

`-l --lock-file'
     Create lock file while processing.

`-x --exec-program NAME'
     Run script/program LIBDIR/NAME after processing all FTN packets.
     Typically this is `ftninpost'.

   `ftn2rfc' read packet files from the input directory or the command
line and converts the FTN mails to Internet RFC mail and news, written
as mail files and news batches to the directories SPOOLDIR/in/mail and
SPOOLDIR/in/news, respectively.


File: fidogate.info,  Node: ftnaf,  Next: ftnbounce,  Prev: ftn2rfc,  Up: Programs

ftnaf -- Areafix
================

Usage:

     ftnaf  [-options]  [Z:N/F.P  command ]

Options:

`-m --mail'
     Process Areafix mail message (RFC) on stdin.

`-r --no-reply'
     Don't send reply via mail, write to stdout.

`-n --no-rewrite'
     Don't rewrite AREAS.BBS.

`-b --areas-bbs NAME'
     Use alternate AREAS.BBS.

`-F --filefix'
     Run as Filefix program, using FAREAS.BBS.

Commands:

`listall'
     List all areas.

`list'
     List areas available to node.

`query'
     List subscribed areas.

`unlinked'
     List unsubscribed areas.

`passwd Z:N/F.P PASSWORD'
`password Z:N/F.P PASSWORD'
`pass Z:N/F.P PASSWORD'
     Set address and password.

`add AREA'
`+AREA'
`AREA'
     Subscribe to AREA.

`remove AREA'
`delete AREA'
`del AREA'
`-AREA'
     Unsubscribe from AREA.

`help'
     Help on Areafix commands.

   All command keywords may be prefixed by `%'. `ftnaf' also recognizes
the `-q' (= query) and `-l' (= list) options following the password in
the subject header.

   For proper operation `ftnaf' requires the `X-FTN-From' header
generated by `ftn2rfc' (see `config.h' configuration).


File: fidogate.info,  Node: ftnbounce,  Next: ftnbsy,  Prev: ftnaf,  Up: Programs

ftnbounce -- Bounce Mail to Unknown Addresses
=============================================

Usage:

     ftnbounce  [-options]  [packet ... ]

Options:

   NOT YET IMPLEMENTED. (Only program skeleton is there.)


File: fidogate.info,  Node: ftnbsy,  Next: ftnhatch,  Prev: ftnbounce,  Up: Programs

ftnbsy -- Create/delete Binkley Busy Filess
===========================================

Usage:

     ftnbsy  [-options]  Z:N/F.P ...

Options:

`-t --test'
     Test for existing busy file.

`-l --lock'
     Create busy file, fail if it already exists.

`-u --unlock'
     Remove busy file.

`-w --wait'
     Wait for busy file to be released (when `-l' option is given).


File: fidogate.info,  Node: ftnhatch,  Next: ftnin,  Prev: ftnbsy,  Up: Programs

ftnhatch -- Hatch new file into file echo
=========================================

Usage:

     ftnhatch  [-options]  area  file  "description"

Options:

`-b --fareas-bbs NAME'
     Use alternate FAREAS.BBS.


File: fidogate.info,  Node: ftnin,  Next: ftninpost,  Prev: ftnhatch,  Up: Programs

ftnin -- Frontend for `ftn2rfc'
===============================

Usage:

     ftnin  [-options]

Options:

`-n --no-toss'
     Don't call `ftn2rfc' for processing.

`-x --exec-program SCRIPT'
     Execute LIBDIR/SCRIPT after `ftn2rfc' processing, typically
     `ftninpost'.

   All standard options are passed to the called `ftn2rfc'.

   `ftnin' looks for mail packets addressed to the gateway addresses
(all `Address' statements in `config') and calls `ftn2rfc' for each
packet.


File: fidogate.info,  Node: ftninpost,  Next: ftninrecomb,  Prev: ftnin,  Up: Programs

ftninpost -- Mail/News Processing Script
========================================

Usage:

     ftninpost  [-options]

   This script is run by `ftn2rfc' or `ftnin', feeding the output in
SPOOLDIR/in/mail and SPOOLDIR/in/news to `sendmail' and `rnews',
respectively.


File: fidogate.info,  Node: ftninrecomb,  Next: ftnlock,  Prev: ftninpost,  Up: Programs

ftninrecomb -- Mail/News Recombining Script
===========================================

Usage:

     ftninrecomb  [-options]

   This script can be run by `ftninpost' to recombine split messages.
The default is that it is not run, you must edit `src/ftninpost.pl' to
enable it.


File: fidogate.info,  Node: ftnlock,  Next: ftnlog,  Prev: ftninrecomb,  Up: Programs

ftnlock -- Create/Remove Lock Files
===================================

Usage:

     ftnlock  [-options]  [NAME ... ]

Options:

`-l --lock'
     Create lock file NAME, fail if it already exists.

`-u --unlock'
     Remove lock file NAME.

   Lock files are created as SPOOLDIR/locks/NAME.


File: fidogate.info,  Node: ftnlog,  Next: ftnpack,  Prev: ftnlock,  Up: Programs

ftnlog -- Write Message to Log File
===================================

Usage:

     ftnlog  [-options]  message text

Options:

`-p --program NAME'
     Set program name for logging.

   This program is used to write a log message from a shell script. The
log file name may be specified with the `LOGFILE' environment variable.


File: fidogate.info,  Node: ftnpack,  Next: ftnroute,  Prev: ftnlog,  Up: Programs

ftnpack -- Pack FTN ArcMail Packets
===================================

Usage:

     ftnpack  [-options]  [packet ... ]

Options:

`-B --binkley name'
     Set Binkley outbound directory.

`-g --grade grade'
     Only process packets with grade (single letter).

`-I --in-dir name'
     Set input directory. Default: SPOOLDIR/toss/out

`-O --out-dir name'
     Set output directory. Default: SPOOLDIR/toss/pack. This is the
     directory, where packets to be put into arcmail archives will be
     created.

`-l --lock-file'
     Create lock file while processing.

`-m --maxarc size'
     Set maximum size of an archive to size KByte. If an existing
     ArcMail archive exceeds this size, `ftnpack' creates a new one.

`-p --packing-file name'
     Read alternate `packing' config file. Default: LIBDIR/packing

`-P --pkt'
     Process *.pkt files in the input directory. Default: output files
     of `ftnroute'.


File: fidogate.info,  Node: ftnroute,  Next: ftnseq,  Prev: ftnpack,  Up: Programs

ftnroute -- Route FTN Mail Packets
==================================

Usage:

     ftnroute  [-options]  [packet ... ]

Options:

`-g --grade grade'
     Only process packets with grade (single letter).

`-I --in-dir name'
     Set input directory. Default: SPOOLDIR/toss/tmp

`-O --out-dir name'
     Set output directory. Default: SPOOLDIR/toss/out

`-l --lock-file'
     Create lock file while processing.

`-r --routing-file name'
     Read alternate `routing' config file. Default: LIBDIR/routing

`-M --maxopen n'
     Set maximum number of concurrently open packet filess to n.
     Default: 10 (`MAXOPENFILES' from `config.h')


File: fidogate.info,  Node: ftnseq,  Next: ftntick,  Prev: ftnroute,  Up: Programs

ftnseq -- Command Line Interface to Sequencer Files
===================================================

Usage:

     ftnseq  [-options]  sequencer

   This utilitity increments the named sequencer file outputs the
resulting value to standard output. Useful for accessing FIDOGATE
sequencer files from perl and shell scripts.


File: fidogate.info,  Node: ftntick,  Next: ftntoss,  Prev: ftnseq,  Up: Programs

ftntick -- Process incoming file echos
======================================

Usage:

     ftntick  [-options]

Options:

`-b --fareas-bbs file'
     Use alternate FAREAS.BBS.

`-I --inbound dir'
     Use alternate inbound directory.

`-t --insecure'
     Insecure processing, do TIC files without password.


File: fidogate.info,  Node: ftntoss,  Next: out-attach,  Prev: ftntick,  Up: Programs

ftntoss -- Toss FTN Mail Packets
================================

Usage:

     ftntoss  [-options]  [packet ... ]

Options:

`-g --grade grade'
     Only process packets with grade (single letter).

`-I --in-dir name'
     Set input directory. Default: SPOOLDIR/toss/in

`-O --out-dir name'
     Set output directory. Default: SPOOLDIR/toss/tmp

`-l --lock-file'
     Create lock file while processing.

`-t --insecure'
     Insecure EchoMail tossing, don't check sender against nodes listed
     in AREAS.BBS.

`-n --toss-all'
     Toss all EchoMail, even messages not addressed to one of our own
     AKAs (most probably routed EchoMail).

`-r --routing-file name'
     Read alternate `routing' config file. Default: LIBDIR/routing

`-s --strip-attribute'
     Strip Hold and Crash attribute from incoming NetMails.

`-m --maxmsg n'
     Flush/close all output packet files after reading n messages.

`-x --maxmsg-exit n'
     Flush/close all output packet files after reading n messages and
     processing the current input packet, then exit.

`-M --maxopen n'
     Set maximum number of concurrently open packet filess to n.
     Default: 10 (`MAXOPENFILES' from `config.h')


File: fidogate.info,  Node: out-attach,  Next: pktdebug,  Prev: ftntoss,  Up: Programs

out-attach -- Outbound file attaches
====================================

Usage:

     out-attach  [-options]  Z:N/F.P  file ...

Options:

`-B --binkley name'
     Set Binkley outbound directory.

`-F --flavor name'
     Set flavor of outbound FLO file to name: `Hold', `Normal',
     `Direct', or `Crash'.

   The file name may start with `^' or `#', indicating that the file
should be deleted or truncated, respectively, after sending.


File: fidogate.info,  Node: pktdebug,  Next: rfc2ftn,  Prev: out-attach,  Up: Programs

pktdebug -- FTN mail packet debugger
====================================

Usage:

     pktdebug  [-options]  file ...

Options (standard options not supported):

`-m --msg-header'
     Print message header.

`-t --msg-text'
     Print message text. Implies `-m'.

`-v --verbose'
     Increase verbose/debug level.

`-h --help'
     Help on `pktdebug' usage.

   This utility displays the packet header and optionally the message
header and message body contents.

   See also the `util/pktmore' utitility, which pipes the output of
`pktdebug' to `$PAGER'.


File: fidogate.info,  Node: rfc2ftn,  Next: rundf,  Prev: pktdebug,  Up: Programs

rfc2ftn -- Internet-FTN Gateway
===============================

Usage:

     rfc2ftn  [-options]  [address ...]

Options:

`-b --news-batch'
     Process news batch (implies `-n').

`-B --binkley name'
     Set Binkley outbound directory.

`-i --ignore-registration'
     Do not bounce mail to FTN nodes not registered in HOSTS (if
     `HOSTS_RESTRICTED' in `config.h' is enabled).

`-n --news-mode'
     Process news message in stdin. Default: mail

`-o --out-packet-file  name'
     Write output to FTN packet file name.

`-O --out-packet-dir  name'
     Set output directory for FTN packets. Default: SPOOLDIR/out

`-t --to'
     Get recipient addresses from To, Cc, Bcc headers instead of
     command line.

`-w --write-outbound  flav'
     Write output directly to Binkley .?UT packets in outbound.

`-W --write-crash'
     Write only crash mail directly to Binkley .CUT file.


File: fidogate.info,  Node: rundf,  Next: runin,  Prev: rfc2ftn,  Up: Programs

rundf -- Script for Checking Free Disk Space
============================================

Usage:

     rundf  dir

No options.

   This shell script returns the free disk space (kB) of the file system
containing dir. It is called by `runtoss' for the directories
`OUTBOUND' and `SPOOLDIR'.

   As distributed with FIDOGATE this script requires `df' from the GNU
file utilities. If you don't have this one, you must adapt
`src/rundf.sh' to the output of your `df'.


File: fidogate.info,  Node: runin,  Next: runout,  Prev: rundf,  Up: Programs

runin -- Script for Processing Inbound Packets
==============================================

Usage:

     runin

No options.

   Runs the tosser for the inbound directories:

   * Unpacking ArcMail archives from the insecure inbound (`rununpack')

   * Tossing packets from the insecure inbound (`runtoss')

   * Unpacking ArcMail archives from the protected inbound (`rununpack')

   * Tossing packets from the protected inbound (`runtoss')

   All log messages are written to LIBDIR/log-in.

   Edit this script (`src/runin.sh') to meet your local requirements.


File: fidogate.info,  Node: runout,  Next: runtoss,  Prev: runin,  Up: Programs

runout -- Script for Processing Gateway Output Packets
======================================================

Usage:

     runout

No options.

   Runs the tosser for the gateway output directory, all log messages
are written to LIBDIR/log-out.

   Edit this script (`src/runout.sh') to meet your local requirements.


File: fidogate.info,  Node: runtoss,  Next: rununpack,  Prev: runout,  Up: Programs

runtoss -- Script for Running Tosser
====================================

Usage:

     runtoss  type

No options.

Types:

`normal'
     Default processing (input SPOOLDIR/toss/in).

`out'
     Process output of `rfc2ftn' (input SPOOLDIR/out).

`pin'
     Process protected inbound (input PINBOUND).

`in'
     Process insecure inbound (input INBOUND).

   Edit the script (`src/runtoss.sh') for configuration options:
maximum number of open files, maximum number of messages, maximum
archive size, minimum free disk space.


File: fidogate.info,  Node: rununpack,  Next: sumcrc,  Prev: runtoss,  Up: Programs

rununpack -- Script for Unpacking ArcMail Archives
==================================================

Usage:

     rununpack  type

No options.

Types:

`pin'
     Process protected inbound (input PINBOUND).

`in'
     Process insecure inbound (input INBOUND).

   This script unpacks arcmail archives (ARC, ZIP, ZOO, LHA, ARJ) in the
inbound directories. It requires the `file' command and the following
definitions in `/etc/magic' to work properly:

     # ----- Archiver ----------------------------------
     0       string          PK              ZIP Archive
     0       byte            0x1a            ARC Archive
     2       string          -lh             LHA Archive
     0       string          ZOO             ZOO Archive
     0       short           0xea60          ARJ Archive
     0       short           0x60ea          ARJ Archive

   Edit the script (`src/rununpack.sh') if necessary, changing unpacker
names. The required programs are `unzip', `unarj', `lha'(`rc'), `zoo',
`arc'.


File: fidogate.info,  Node: sumcrc,  Next: Config files,  Prev: rununpack,  Up: Programs

sumcrc -- CRC Checksum Utility
==============================

Usage:

     sumcrc  [-options]  file ...

Options (standard options not supported):

`-1 --skip-first-line'
     Skip first line in file. Useful for computing nodelist CRC.

`-3 --crc32'
     Compute 32 bit CRC checksum, using the standard 32 bit polynomial
     (same as in ZModem, ZIP). Default: 16 bit CRC CCITT polynomial.

`-6 --crc16'
     Use alternate 16 bit CRC16 polynomial.

`-x --hex'
     Output CRC value in hex. Default: decimal

`-z --eof-at-ctrl-z'
     The Ctrl-Z character (`^Z') indicates end-of-file (MSDOS kludge).

`-v --verbose'
     Increase verbose/debug level.

`-h --help'
     Help on `sumcrc' usage.

   Use `sumcrc -1z' to compute the checksum for a standard FIDO
nodelist.


File: fidogate.info,  Node: Config files,  Next: Config,  Prev: sumcrc,  Up: Top

FIDOGATE Config Files
*********************

FIDOGATE uses the following config files:

* Menu:

* Config::      `config.*' configuration files
* Hosts::       `hosts' FTN address to host name conversion
* Aliases::     `aliases' user aliases
* Areas::       `areas' FTN area to newsgroup conversion
* Bounce::      Bounce messages of `ftn2rfc'
* Passwd::      `passwd' password config file
* Routing::     `routing' file for `ftntoss' and `ftnroute'
* Packing::     `packing' file for `ftnpack'
* Areas.bbs::   `areas.bbs' EchoMail distribution

   All config files use the `#' character for introducing a comment and
ignore empty lines. Keywords and commands are not case-sensitive.

