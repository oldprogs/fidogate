This is Info file fidogate.info, produced by Makeinfo version 1.68 from
the input file fidogate.texi.

   This file documents the installation and usage of FIDOGATE version
4.3

   Copyright (C) 1994-1999, Martin Junius

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into other languages, under the above conditions for modified
versions.


File: fidogate.info,  Node: Top,  Next: Introduction,  Up: (DIR)

Introduction
************

This manual documents how to install and use FIDOGATE. It is the first
step toward a concise documentation. Alas, writing documentation is a
somewhat tedious business, so this manual is far from complete.

   In addition, the major changes in configuration from previous
version to 4.3 are not completely documented here.

* Menu:

* Introduction::Introduction to FIDOGATE
* Installation::Compiling and installing FIDOGATE
* Programs::    FIDOGATE programs and scripts
* Config files::FIDOGATE config files
* Basic::       Basic configuration
* Usage::       FIDOGATE usage

* Index::       Index

 -- The Detailed Node Listing --

Compiling and installing FIDOGATE

* config.h::    The `config.h' header file
* config.make:: The `config.make' Makefile configuration
* Compiling::   Compiling and installing FIDOGATE
* Integration:: Integrating FIDOGATE and the mail/news system
* Testing::     Testing FIDOGATE operation
* Connecting::  Connecting to FIDONET

FIDOGATE Programs

* ffx::         Remote execution via FIDO mailer
* ffxbatch::    Remove execution via FIDO mailer - batched
* ffxmail::     `ffx' frontend for sending mail
* ffxqt::       Execute `ffx' requests
* ffxrmail::    `rmail' command for `ffxqt'
* ffxrun::      Script for running `ffxqt'
* ftn2ftn::     FTN-FTN NetMail gateway
* ftn2rfc::     FTN-Internet mail/news gateway
* ftnaf::       Areafix
* ftnafmail::   Areafix mail frontend
* ftnbounce::   Bounce mail to unknown FTN address
* ftnbsy::      Create/delete Binkley busy files
* ftnconfig::   Retrieve information from FIDOGATE config files
* ftnhatch::    Hatch new file into file
* ftnin::       Frontend for `ftn2rfc'
* ftninpost::   Mail/news processing script
* ftninrecomb:: Mail/news recombining script
* ftnlock::     Create/delete lock files
* ftnlog::      Write message to log file
* ftnpack::     Pack (ArcMail) FTN mail packets
* ftnroute::    Route FTN mail packets
* ftnseq::      Access sequencer file
* ftntick::     Process incoming file echos
* ftntoss::     Toss/remap/rewrite FTN mail packets
* ftnfattach::  Binkley outbound file attach utility
* pktdebug::    FTN mail packet debugger
* rfc2ftn::     Internet-FTN gateway
* rundf::       Script for checking free disk space
* runin::       Script for processing inbound packets
* runout::      Script for processing gateway output packets
* runtoss::     Script for running tosser
* rununpack::   Script for unpacking arcmail archives
* sumcrc::      CRC checksum utility

FIDOGATE Config Files

* Config::      `config.*' configuration files
* Hosts::       `hosts' FTN address to host name conversion
* Aliases::     `aliases' user aliases
* Areas::       `areas' FTN area to newsgroup conversion
* Bounce::      Bounce messages of `ftn2rfc'
* Passwd::      `passwd' password config file
* Routing::     `routing' file for `ftntoss' and `ftnroute'
* Packing::     `packing' file for `ftnpack'
* Areas.bbs::   `areas.bbs' EchoMail distribution

Basic Configuration

* Sendmail::	       Sendmail configuration
* Example Point::      Example point configuration
* Example Point 2::    Example configuration with 2 point addresses
* Example Node::       Example leaf node configuration

FIDOGATE Usage

* RFC Headers:: RFC Headers in FTN Messages
* X Headers::   X Headers in RFC Messages


File: fidogate.info,  Node: Introduction,  Next: Installation,  Prev: Top,  Up: Top

Introduction to FIDOGATE
************************

FIDOGATE is a Fido-Internet gateway and a Fido tosser.  It is placed
under the GNU General Public License, see COPYING for details.

   The gateway converts between the worlds of Fido NetMail/EchoMail (or
FTNs, Fido Technology Networks in general) and the UNIX mail/news
system. FIDOGATE will convert Fido mail packets to RFC822/1036-style
messages and vice versa.

   FIDOGATE also includes a complete FIDO mail processor
(NetMail/EchoMail scanner and tosser), an FTN-FTN gateway (NetMail
only), a file processor (TIC file areas) and an Areafix/Filefix.

How to Get FIDOGATE
===================

The latest version of FIDOGATE is available at the locations.

Internet WWW FIDOGATE home page:
     http://www.fido.de/fidogate/

Internet anonymous ftp:
     ftp://ftp.fido.de/pub/fidogate/

BBS and FIDO frequest:
     2:2452/110 111  242:1000/1 2  +49-241-876604  (V.34, ISDN V.110, X.75)
     Magic name FIDOGATE

Requirements for FIDOGATE:
==========================

   * Something that gets you FIDONET mail. If you want a UNIX-based FIDO
     mailer, I recommend using ifcico.

   * Installed news system. (e.g. INN)

   * A mail transport agent. (e.g. sendmail)

   * Perl. (version 5)

   * M4 for compiling the sendmail config files.

FIDOGATE Mailing List
=====================

There is a NEW mailing list for FIDOGATE discussions and announcements:

     fidogate@fido.de

   To subscribe to this mailing list, send a message to

     majordomo@fido.de

with the command

     subscribe fidogate

in the message body (not subject!). This will not immediately put your
email address into the mailing list. A confirmation mail with an
authentication code will be send to you, which must be returned to
majordomo to finally enable your subscription.

   To unsubscribe from this mailing list, send the command

     unsubscribe fidogate

Credits
=======

   This stuff is a derived version of a posting called `rfmail' to
Usenet's alt.sources some time ago. I rewrote the entire code by now.

   The original `rfmail' authors were: Teemu Torma, who wrote the first
version, and Heikki Suonsivu, who did some changes and improvements and
posted version 0.3.3 to the net.

   Also used:

The parsedate.y date/time parser, from INN 1.4:
     Originally written by Steven M. Bellovin <smb@research.att.com> while
     at the University of North Carolina at Chapel Hill.  Later tweaked by
     a couple of people on Usenet.  Completely overhauled by Rich $alz
     <rsalz@osf.org> and Jim Berets <jberets@bbn.com> in August, 1990.
     Further revised (removed obsolete constructs and cleaned up timezone
     names) in August, 1991, by Rich.  Paul Eggert <eggert@twinsun.com>
     helped in September, 1992.
   (Changed slightly and adopted for FIDOGATE)

The xstrtok() function:
     16/10/1991      Wolfram Roesler         wr@bara.oche.de

GNU `getopt'.

The wildmat() function from GNU tar, modified and adopted for FIDOGATE.


File: fidogate.info,  Node: Installation,  Next: config.h,  Prev: Introduction,  Up: Top

Compiling and installing FIDOGATE
*********************************

* Menu:

* config.h::    The `config.h' header file
* config.make:: The `config.make' Makefile configuration
* Compiling::   Compiling and installing FIDOGATE
* Integration:: Integrating FIDOGATE and the mail/news system
* Testing::     Testing FIDOGATE operation
* Connecting::  Connecting to FIDONET

This chapter describes the FIDOGATE configuration and installation.  You
must also create and edit the config files to be installed in the
CONFIGDIR directory, `fidogate.conf', `areas', `hosts', `passwd',
`routing', `packing', `aliases' according to your setup (see the
examples subdirectory).

   The chapter on config files describes them in detail.


File: fidogate.info,  Node: config.h,  Next: config.make,  Prev: Installation,  Up: Installation

The `config.h' Header File
==========================

Normally, if you want to compile a standard version of FIDOGATE on one
of the supported platforms, it is not necessary to change anything in
this file. Most things can be configured or overridden in `config.make'
(compile-time) or `fidogate.conf' (run-time).

If you really want to edit `config.h', here are the gory details:

`LOCAL_FTN_ADDRESSES'
     Generate "local" FTN addresses: User_Name%p.f.n.z@hostname.domain
     instead of User_name@p.f.n.z.domain.

`DO_BSY_FILES'
     Create Binkley-style busy files while accessing the Binkley
     outbound.

`NFS_SAFE_LOCK_FILES'
     Create lock / bsy files in an NFS-safe way.

`AMIGADOS_4D_OUTBOUND'
     Use AmigaDOS-style outbound file names.

`MAXMSGSIZE'
     Maximum size of FIDO messages generated by `rfc2ftn', larger
     messages will be split. Alas, less than 16K seems to be the only
     safe setting. This is the default value.

`FTN_INVALID_DOMAIN'
     Domain address to be used for invalid FTN addresses.

`FACILITY'
     syslog facility used if `Logfile' is set to "syslog".

`CHARSET_STDFTN'
     Default charset for Fido messages.

`CHARSET_STD7BIT'
     Default charset for RFC messages with 7bit encoding.

`ALIASES_ARE_LOCAL'
     Addresses found in the `aliases' config file are rewritten so that
     the sender's address is the gateway.

`PASSTHRU_NETMAIL'
     Passthru operation for NetMail: if the sender of the message is an
     FTN address, the origin address of the resulting FTN message will
     be that FTN address. WARNING: enabled only if you really know what
     you're doing!

`PASSTHRU_ECHOMAIL'
     Passthru operation for EchoMail: X-FTN-Tearline, X-FTN-Origin,
     X-FTN-Seen-By, X-FTN-Path headers will be used for tear line, *
     Origin, SEEN-BY, ^APATH, when gating from Internet to FTN.
     WARNING: enabled only if you really know what you're doing!

`AI_1'

`AI_2'

`AI_3'

`AI_4'

`AI_5'

`AI_6'

`AI_7'

`AI_8'
     Configuration for Andy Igoshin's patches, see
     `contrib/fidogate-4.3a3-ai-pl9.1/README.ai' for details.

System dependent configuration:

   This configuration contains several groups of #define/#undef. First,
the definitions for a standard POSIX UNIX, followed by #ifdef'ed
definitions for SunOS, Linux, FreeBSD, Interactive UNIX, MSDOS DJGPP,
NextStep, GNU-WIN32.

   If you want to port FIDOGATE to a new system, please add a #ifdef'ed
section similar to the already existing ones.

   The gory details:

`HAS_FCNTL_LOCK'
     Define, if the system support fcntl() file locking.

`HAS_GETTIMEOFDAY'
     Define, if the system has the gettimeofday() function.

`HAS_TM_GMTOFF'
     Define, if the system has a tm_gmtoff field in struct tm.

`HAS_SYSEXITS_H'
     Define, if the system support the `sysexits.h' header file.

`HAS_TM_ZONE'
     Define, if the system has a tm_zone field in struct tm.

`HAS_STRFTIME'
     Define, if the system has the Standard-C strftime() function.

`HAS_TZNAME'
     Define, if the system has `extern char *tzname[2]'.

`HAS_STRCASECMP'
     Define, if the system has the `strcasecmp()' and `strncasecmp()'
     functions.

`HAS_STRICMP'
     Define, if the system has the `stricmp()' and `strnicmp()'
     functions.

`HAS_STERROR'
     Define, if the system has the `strerror()' function.

`DO_BINARY'
     Define, if files must be opened in binary mode.

`DO_DOSIFY'
     Define, if filenames must be converted to DOS, OS2-style `\'.

`RECEIVED_BY_MAILER'
     Define, if extra Received lines are inserted by the mail system,
     currently only used for NeXT.

`HAS_SYSLOG'
     Define, if syslogd and the library function `syslog()',
     `vsyslog()' are suppored.

`HAS_SNPRINTF'
     Define, if `snprintf()' and `vsnprintf()' are supported.

`HAS_HARDLINKS'
     Define, if the system supports file systems with hard links and the
     library function `link()'.

   Define only one of `HAS_TM_ZONE', `HAS_STRFTIME', `HAS_TZNAME', and
also only one of `HAS_STRCASECMP', `HAS_STRICMP'.

THE FOLLOWING DEFINES SHOULD REALLY BE LEFT AS IS!!!

`MSGID_FIDONET_DOMAIN'
     Default domain for standard FIDO addresses (zone 1-6). Used for
     Message-IDs only, so DO NOT CHANGE.

`PACKET_MODE'

`BSY_MODE'

`FLO_MODE'

`DATA_MODE'

`DIR_MODE'

`CONF_MODE'
     Permissions for files processed by FIDOGATE.

`FTN_RFC_HEADERS'
     RFC headers recognized at the beginning of FTN messages.

`RFC_LVL_1_HEADERS'
     RFC headers put into FTN messages for RFC level 1.

`R_MODE'

`W_MODE'

`A_MODE'

`RP_MODE'

`WP_MODE'

`AP_MODE'
     Modes (`fopen()') for opening files.

`DATE_LOG'

`DATE_DEFAULT'

`DATE_NEWS'

`DATE_MAIL'

`DATE_FROM'

`DATE_FTS_0002'

`DATE_TICK_PATH'

`DATE_VIA'

`DATE_SPLIT'
     Date format strings.

`PRODUCT_CODE'
     FIDO product code used by `rfc2ftn'.

`MAX_LINELEN'
     Maximum line length for formatting (line break) FIDO messages.

`MAXADDRESS'
     Maximum number of `Address' and `Zone' statements in `config' file.

`MAXDOSDRIVE'
     Maximum number of `DosDrive' statements in `config' file.

`MAXPATH'
     Maximum length of a pathname in FIDOGATE.

`MAXINETADDR'
     Maximum length of the address part of an Internet address in
     FIDOGATE.

`MAXUSERNAME'
     Maximum length of the user name part of an Internet address in
     FIDOGATE.

`MAXOPENFILES'
     Maximum number of packet files concurrently opened by tosser
     programs. The maximum possible value is operating system and
     configuration dependent, see UNIX ulimits.


File: fidogate.info,  Node: config.make,  Next: Compiling,  Prev: config.h,  Up: Installation

The `config.make' Makefile Configuration
========================================

This file is included in all FIDOGATE Makefiles.

   A special convention is used for defining FIDOGATE configuration
macros: macro name starting with `DEFAULT_' are used by the compilation
process to automatically generate C code.

`DEFAULT_V_option'
     Creates a Makefile macro definition, substitutes <option> in shell
     and perl scripts, creates a compile-time C `#define
     DEFAULT_'option in `paths.h', a run-time configuration option
     option in `fidogate.conf', and makes FIDOGATE evaluate the
     environment variable `FIDOGATE_'option.

`DEFAULT_F_option'
     Creates a Makefile macro definition, substitutes <option> in shell
     and perl scripts, creates a compile-time C `#define
     DEFAULT_'option in `paths.h'. No run-time override!

`DEFAULT_A_option'
     Creates a %X abbreviation (can be used at the start of file names)
     for option.

   Be very carefull not to remove any of the FIDOGATE standard macros
and don't touch the standard abbreviations in this file!!!

`DEFAULT_V_CONFIGDIR'
     Directory for config files.

`DEFAULT_V_LIBDIR'
     Directory for FIDOGATE's internal programs.

`DEFAULT_V_BINDIR'
     Directory for user programs and scripts.

`DEFAULT_V_LOGDIR'
     Directory for log files.

`DEFAULT_V_VARDIR'
     Directory for `areas.bbs', `history'.

`DEFAULT_V_LOCKDIR'
     Directory for lock files.

`DEFAULT_V_SPOOLDIR'
     Internal spool directory (temporary files).

`DEFAULT_V_BTBASEDIR'
     BinkleyTerm-style outbound base directory. This is the base
     directory, not the actual zone outbound directory.

`DEFAULT_V_INBOUND'
     BinkleyTerm-style inbound directory.

`DEFAULT_V_PINBOUND'
     BinkleyTerm-style protected inbound directory.

`DEFAULT_V_UUINBOUND'
     BinkleyTerm-style inbound directory for the `recvuu' script.

`DEFAULT_V_FTPINBOUND'
     BinkleyTerm-style FTP inbound directory.

`DEFAULT_V_ACL'
     Access control list for AI patches (not used for standard FIDOGATE
     distribution).

`DEFAULT_V_ALIASES'
     Configuration file for aliases.

`DEFAULT_V_AREAS'
     Configuration file for areas/newsgroups gateway.

`DEFAULT_V_HOSTS'
     Configuration file for registered hosts.

`DEFAULT_V_PASSWD'
     Configuration file for passwords.

`DEFAULT_V_PACKING'
     Configuration file for ArcMail packer (`ftnpack').

`DEFAULT_V_ROUTING'
     Configuration file for NetMail/EchoMail routing (`ftntoss',
     `ftnroute').

`DEFAULT_V_HISTORY'
     MSGID history file for dupe check.

`DEFAULT_V_LOGFILE'
     Default log file.

`DEFAULT_V_CHARSETMAP'
     Character set mapping table.

`DEFAULT_F_NEWSETCDIR'
     INN directory: config files

`DEFAULT_F_NEWSVARDIR'
     INN directory: active, history files.

`DEFAULT_F_NEWSLIBDIR'
     INN directory: scripts.

`DEFAULT_F_NEWSSPOOLDIR'
     INN directory: news spool.

`DEFAULT_F_IFMAILDIR'
     Ifcico/ifmail directory.

`DEFAULT_F_CONFIG_GATE'

`DEFAULT_F_CONFIG_MAIN'

`DEFAULT_F_CONFIG_FFX'
     FIDOGATE main configuration file `fidogate.conf'.

`DEFAULT_F_SEQ_MAIL'

`DEFAULT_F_SEQ_NEWS'

`DEFAULT_F_SEQ_MSGID'

`DEFAULT_F_SEQ_PKT'

`DEFAULT_F_SEQ_SPLIT'

`DEFAULT_F_SEQ_FF'

`DEFAULT_F_SEQ_TOSS'

`DEFAULT_F_SEQ_PACK'

`DEFAULT_F_SEQ_TICK'
     Sequencer files.

`DEFAULT_F_LOCK_HISTORY'
     Lock file for history access.

`DEFAULT_F_OUTRFC_MAIL'

`DEFAULT_F_OUTRFC_NEWS'

`DEFAULT_F_OUTPKT'

`DEFAULT_F_OUTPKT_MAIL'

`DEFAULT_F_TOSS_TOSS'

`DEFAULT_F_TOSS_ROUTE'

`DEFAULT_F_TOSS_PACK'

`DEFAULT_F_TOSS_BAD'

`DEFAULT_F_OUTPKT_NEWS'
     Internal spool directories (temporary files).  If these
     directories are different from the default ones, the commands for
     the `install-dirs' target of `Makefile' must be changed as well.

`DEFAULT_F_TICK_HOLD	= %B/tick'
     Outbound hold directory for TIC files.

`DEFAULT_A_CONFIGDIR'

`DEFAULT_A_LIBDIR'

`DEFAULT_A_BINDIR'

`DEFAULT_A_LOGDIR'

`DEFAULT_A_VARDIR'

`DEFAULT_A_LOCKDIR'

`DEFAULT_A_SPOOLDIR'

`DEFAULT_A_BTBASEDIR'

`DEFAULT_A_INBOUND'

`DEFAULT_A_PINBOUND'

`DEFAULT_A_UUINBOUND'
     Abbreviations for configured directories.

`PERL'
     Full path name of perl executable.

`INFODIR'
     Directory for installing info documentation files.

`HTMLDIR'
     Directory for installing HTML documentation files.

`HTMLLOGDIR'
     Directory for installing CGI files.

`M4'
     m4 macro processor (for compiling sendmail cf files).

`OWNER'
     Owner of FIDOGATE files.

`GROUP'
     Group of FIDOGATE files.

`PERM_PROG'
     Permissions for installing programs.

`PERM_DATA'
     Permissions for installing data files.

`PERM_SETUID'
     Permissions for installing setuid `OWNER' programs.

`PERM_DIR'
     Permissions for installing directories.

`CC'
     C compiler.

`YACC'
     `yacc' or a clone like `bison -y'.

`AR'
     `ar' monkey ... (@!#$%&... ouch!) ... librarian.

`RANLIB'
     Library utitility, if needed.

`DEBUG'
     Optimize or debugging flags for compiling.

`INCLUDE'
     C include (-I) options.

`CFLAGS'
     Flags for compiling FIDOGATE.

`LFLAGS'
     Flags for linking FIDOGATE.

`LIBS'
     Libraries for linking FIDOGATE, including the FIDOGATE library
     `libfidogate.a'.

`INSTALL'
     Install program.

`'
     Set to `.exe' for MSDOS, OS2, Win32.

`INSTALL_PROG'
     Install command for installing programs.

`INSTALL_DATA'
     Install command for installing data files.

`INSTALL_SETUID'
     Install command for installing setuid programs.

`INSTALL_DIR'
     Install command for installing directories.

`PREFIX'
     Extra prefix directory for `make install'.

`LIB'
     Name of the FIDOGATE library.


File: fidogate.info,  Node: Compiling,  Next: Integration,  Prev: config.make,  Up: Installation

Compiling and Installing FIDOGATE
=================================

Compile the beast by entering
     make depend
     make

   Alternatively an optimized version can be compiled with
     make DEBUG=-O2

   If everything works, you must create the necessary directories:
     make install-dirs
   Then install all FIDOGATE programs:
     make install

   Next you must create the configuration files in (default)
`/etc/fidogate'. Have a look at the various configuration in directory
`examples/' and use them to build your own configuration.


File: fidogate.info,  Node: Integration,  Next: Testing,  Prev: Compiling,  Up: Installation

Integrating FIDOGATE and the Mail/News System
=============================================

`scripts/inn'
     Scripts for INN.

`scripts/cnews'
     Scripts for CNews.

`sendmail/cf'
     Sendmail V8 configuration files (m4) and example .mc files for
     FIDOGATE: Fido.DE domain gateway morannon, orodruin, point setup.

   Much more concise instructions should be here!!! ;-)


File: fidogate.info,  Node: Testing,  Next: Connecting,  Prev: Integration,  Up: Installation

Testing the FIDOGATE Installation
=================================

`Tosser'
--------

   ...

`Gateway'
---------

   ...


File: fidogate.info,  Node: Connecting,  Next: Programs,  Prev: Testing,  Up: Installation

Connecting to FIDONET
=====================

FIDOGATE does NOT include a FIDO mailer, so you have to transfer FIDO
mail to and from the UNIX system by some other means.

   If you want everything running on the UNIX system, you need a FIDO
mailer for UNIX. Currently, this choice is limited to
   * BinkleyTerm

   * ifcico

   * BinkD

   I don't know what the current state of BinkleyTerm for Unix/Linux is,
but ifcico and BinkD are working very well for me. See the FIDOGATE home
page at `http://www.fido.de/fidogate/' for links.

   Another solution is a separate PC running DOS or OS/2 and
BinkleyTerm as a mailer. The Fido.DE gateway currently comprises a
LINUX PC for the gateway/tosser and Samba server, and an OS/2 PC
running BinkleyTerm for the analog phone and ISDN lines. The
BinkleyTerm outbound is kept on the LINUX server, so the OS/2 PC and
the gateway have access to it.


File: fidogate.info,  Node: Programs,  Next: ffx,  Prev: Connecting,  Up: Top

FIDOGATE Programs
*****************

   NOT UP-TO-DATE FOR VERSION 4.3.X !!!

The current FIDOGATE distribution includes the following programs and
scripts:

* Menu:

* ffx::         Remote execution via FIDO mailer
* ffxbatch::    Remove execution via FIDO mailer - batched
* ffxmail::     `ffx' frontend for sending mail
* ffxqt::       Execute `ffx' requests
* ffxrmail::    `rmail' command for `ffxqt'
* ffxrun::      Script for running `ffxqt'
* ftn2ftn::     FTN-FTN NetMail gateway
* ftn2rfc::     FTN-Internet mail/news gateway
* ftnaf::       Areafix
* ftnafmail::   Areafix mail frontend
* ftnbounce::   Bounce mail to unknown FTN address
* ftnbsy::      Create/delete Binkley busy files
* ftnconfig::   Retrieve information from FIDOGATE config files
* ftnhatch::    Hatch new file into file
* ftnin::       Frontend for `ftn2rfc'
* ftninpost::   Mail/news processing script
* ftninrecomb:: Mail/news recombining script
* ftnlock::     Create/delete lock files
* ftnlog::      Write message to log file
* ftnpack::     Pack (ArcMail) FTN mail packets
* ftnroute::    Route FTN mail packets
* ftnseq::      Access sequencer file
* ftntick::     Process incoming file echos
* ftntoss::     Toss/remap/rewrite FTN mail packets
* ftnfattach::  Binkley outbound file attach utility
* pktdebug::    FTN mail packet debugger
* rfc2ftn::     Internet-FTN gateway
* rundf::       Script for checking free disk space
* runin::       Script for processing inbound packets
* runout::      Script for processing gateway output packets
* runtoss::     Script for running tosser
* rununpack::   Script for unpacking arcmail archives
* sumcrc::      CRC checksum utility

   Almost all FIDOGATE programs support standard options, which aren't
listed in the following sections describing the individual programs:

`-v --verbose'
     Increase the verbosity/debug level.

`-h --help'
     Help on usage and options.

`-c --config name'
     Read an alternate config file. `""' means none. name may start
     with `%L/', indicating a file relative to LIBDIR.

`-a --addr Z:N/F.P'
     Set the main address of this system.

`-u --uplink-addr Z:N/F.P'
     Set the uplink address (boss node) of this system.

   The option `-a' and `-u' also support Internet-style FTN addresses,
e.g. `p10.f110.n2452.z2'. If any of these options is specified, all
addresses from the config file are disabled.

   All options and config statements which take file or directory names
accept the following `%' abbreviations:

`%L'
     The value of `LibDir'

`%S'
     The value of `SpoolDir'

`%G'
     The value of `LogDir'

`%O'
     The value of `Outbound'

`%I'
     The value of `Inbound'

`%P'
     The value of `PInbound'

`%U'
     The value of `UUInbound'


File: fidogate.info,  Node: ffx,  Next: ffxbatch,  Prev: Programs,  Up: Programs

ffx -- Remote Execution via FIDO Mailer
=======================================

Usage:

     ffx  [-options]  Z:N/F.P  command

Options:

`-b --batch-dir dir'
     Operate in batch mode, using dir. Control and data files are not
     immediately appended to the node's FLO file, but rather written to
     a separate batch directory SPOOLDIR/out.ZZZ/dir. Implies `-n'.

`-B --binkley name'
     Set Binkley outbound directory.

`-F --flavor flavor'
     Set flavor of outbound FLO file: `Hold', `Normal', `Direct', or
     `Crash'.

`-g --grade grade'
     Set grade of control and data files to grade (single letter
     [a-z0-9]).

`-n --nocompression'
     Don't compress data files.

   The compression program (`gzip') and other are hardcoded in the
`ffx.c' source code.


File: fidogate.info,  Node: ffxbatch,  Next: ffxmail,  Prev: ffx,  Up: Programs

ffxbatch -- Batches Remote Executon via FIDO Mailer
===================================================

Usage:

     ffxbatch  [-options]  Z:N/F.P  command

Options:

`-b --batch-dir dir'
     Select batch directory as used by `ffx -b'dir. The files in this
     directory will be archived and transfered as a single `ffx'
     command.

`-B --binkley name'
     Set Binkley outbound directory.

`-F --flavor flavor'
     Set flavor of outbound FLO file: `Hold', `Normal', `Direct', or
     `Crash'.

`-g --grade grade'
     Set grade of control and data files to grade (single letter
     [a-z0-9]).

`-w --wait-bsy'
     Wait, if busy file for the node exists. Default: terminate, don't
     archive batched `ffx'-Jobs.

   The name of the archiving program (`zip') is hardcoded in the
`ffxbatch.c' source.


File: fidogate.info,  Node: ffxmail,  Next: ffxqt,  Prev: ffxbatch,  Up: Programs

ffxmail -- ffx Frontend for Sending Mail
========================================

Usage:

     ffxmail  Z:N/F.P  address ...

No options.

   `ffxmail' calls `ffx' in batch mode (`-b'), selecting the batch
directory from the node address. Modify the script (`src/ffxmail.sh')
for other addresses/batch directories.


File: fidogate.info,  Node: ffxqt,  Next: ffxrmail,  Prev: ffxmail,  Up: Programs

ffxqt -- Execute ffx Requests
=============================

Usage:

     ffxqt  [-options]

Options:

`-g  --grade grade'
     Process ffx jobs with grade only. grade must be a single letter.

`-I --inbound name'
     Select the input directory where the `f???????.ffx' control files
     are read from. Default: INBOUND

`-t --insecure'
     Process ffx files without password. Default: ffx file must contain
     a password.

   `ffxqt' searches the input directory for control files and executes
the requested commands. Commands are executed by running
LIBDIR/ffxqt-dir/command, so every allowed command must reside as a
script or symbolic link there.

   Some program/paths are hard coded in the `ffxqt.c' code.


File: fidogate.info,  Node: ffxrmail,  Next: ffxrun,  Prev: ffxqt,  Up: Programs

ffxrmail -- Script for Processing FFX `rmail' Commands
======================================================

Usage:

     ffxrun  [-v]

   Perl script to be called as `rmail' by `ffxqt'. This replaces
`/bin/rmail' (UUCP), calling `/usr/lib/sendmail' directly with
appropiate options.

   Installed as LIBDIR/ffxqt-dir/`rmail'.


File: fidogate.info,  Node: ffxrun,  Next: ftn2ftn,  Prev: ffxrmail,  Up: Programs

ffxrun -- Script for Running ffxqt
==================================

Usage:

     ffxrun  [ffxqt options]

   This script runs `ffxqt' twice (the second run for processing batch
archives unpacked by the first one). All command line arguments are
passed to `ffxqt'.


File: fidogate.info,  Node: ftn2ftn,  Next: ftn2rfc,  Prev: ffxrun,  Up: Programs

ftn2ftn -- FTN-FTN NetMail Gateway
==================================

Usage:

     ftn2ftn  [-options]  [packet ... ]

Options:

`-A --address-a Z:N/F.P'
     Set FTN address in network A.

`-B --address-b Z:N/F.P'
     Set FTN address in network B.

`-o --out-packet-file NAME'
     Set output packet file name.

`-O --out-packet-dir NAME'
     Set output packet directory.

   This program provides a NetMail gateway between different FTNs, using
the (somewhat) standard "User Name%Z:N/F.P" addressing in the FTN from
and to fields.

   If no packet is given on the command line, `ftn2ftn' looks for
packets addressed to the gateway addresses (A and B) in the Binkley
outbound. Both gateway addresses must be specified with the `-A' and
`-B' options.

   If a packet name is passed on the command line, `ftn2ftn' will gate
this to the other network A. The gateway address (sender of the mails
in network A) is set with `-A' option.


File: fidogate.info,  Node: ftn2rfc,  Next: ftnaf,  Prev: ftn2ftn,  Up: Programs

ftn2rfc -- FTN-Internet Gateway
===============================

Usage:

     ftn2rfc  [-options]  [packet ... ]

Options:

`-1 --single-articles'
     Write single articles to output files (in `tmpnews'), not news
     batches containing several articles (batch is default).

`-I --inbound-dir NAME'
     Set the input directory for FTN packets.

`-i --ignore-hosts'
     Don't bounce unknown hosts (unknown = not registered in `hosts')

`-l --lock-file'
     Create lock file while processing.

`-n --no-remove'
     Don't remove or rename input packet files, return exit code 1 if
     processing fails.

`-t --insecure'
     Operate in insecure mode. All messages containing a To line for
     gateway addressing will be bounced. Also sets the input directory
     to SPOOLDIR/insecure.

`-x --exec-program SCRIPT'
     Run SCRIPT after processing all FTN packets. Typically this is
     `%L/ftninpost'.

   `ftn2rfc' reads packet files from the input directory or the command
line and converts the FTN packets to Internet RFC mail and news,
written as mail files and news batches to the directories
SPOOLDIR/in/mail and SPOOLDIR/in/news, respectively.


File: fidogate.info,  Node: ftnaf,  Next: ftnafmail,  Prev: ftn2rfc,  Up: Programs

ftnaf -- Areafix
================

Usage:

     ftnaf  [-options]  [Z:N/F.P  command ]

Options:

`-m --mail'
     Process Areafix mail message (RFC) on stdin.

`-r --no-reply'
     Don't send reply via mail, write to stdout.

`-n --no-rewrite'
     Don't rewrite AREAS.BBS.

`-b --areas-bbs NAME'
     Use alternate AREAS.BBS.

`-F --filefix'
     Run as Filefix program, using FAREAS.BBS.

Commands:

`listall'
     List all areas.

`list'
     List areas available to node.

`query'
     List subscribed areas.

`unlinked'
     List unsubscribed areas.

`passwd Z:N/F.P PASSWORD'

`password Z:N/F.P PASSWORD'

`pass Z:N/F.P PASSWORD'
     Set address and password.

`add AREA'

`+AREA'

`AREA'
     Subscribe to AREA.

`remove AREA'

`delete AREA'

`del AREA'

`-AREA'
     Unsubscribe from AREA.

`create AREA  [-options ]'
     Create new area. AUTHORISATION NOT YET IMPLEMENTED, command works
     only from command line. Allowed `areas.bbs' options: `-r', `-#',
     `-l', `-k', and `-d'. If you want to set an area description using
     `-d "Some Text"', enclose the whole command in single quotes
     `'...''.

`vacation AREA'
     Set vacation flag for AREA.

`help'
     Help on Areafix commands.

   All command keywords may be prefixed by `%'. `ftnaf' also recognizes
the `-q' (= query) and `-l' (= list) options following the password in
the subject header.

   For proper operation `ftnaf' requires the `X-FTN-From' header
generated by `ftn2rfc' (see `config.h' configuration).


File: fidogate.info,  Node: ftnafmail,  Next: ftnbounce,  Prev: ftnaf,  Up: Programs

ftnafmail -- Areafix Mail Frontend
==================================

Usage:

     ftnafmail  [-options]

Options:

`-F --filefix'
     Run `ftnaf' as Filefix program.

   This is the setuid mail frontend for `ftnaf' to be run from the
sendmail aliases:

     # Areafix/Filefix - FIDOGATE ftnaf
     areafix: "|/usr/local/lib/fidogate/ftnafmail"
     areamgr: areafix
     filefix: "|/usr/local/lib/fidogate/ftnafmail -F"
     filemgr: filefix


File: fidogate.info,  Node: ftnbounce,  Next: ftnbsy,  Prev: ftnafmail,  Up: Programs

ftnbounce -- Bounce Mail to Unknown Addresses
=============================================

Usage:

     ftnbounce  [-options]  [packet ... ]

Options:

   NOT YET IMPLEMENTED. (Only program skeleton is there.)


File: fidogate.info,  Node: ftnbsy,  Next: ftnconfig,  Prev: ftnbounce,  Up: Programs

ftnbsy -- Create/delete Binkley Busy Filess
===========================================

Usage:

     ftnbsy  [-options]  Z:N/F.P ...

Options:

`-t --test'
     Test for existing busy file.

`-l --lock'
     Create busy file, fail if it already exists.

`-u --unlock'
     Remove busy file.

`-w --wait'
     Wait for busy file to be released (when `-l' option is given).


File: fidogate.info,  Node: ftnconfig,  Next: ftnhatch,  Prev: ftnbsy,  Up: Programs

ftnconfig -- Retrieve information from FIDOGATE config files
============================================================

Usage:

     ftnconfig  [-options]  parameter

Options:

`-l --no-newline'
     No output of newline after the parameter value.

`-n --no-output'
     No output, exit code only.

`-t --test-only'
     Output `1' if the parameter is present, `0' if not.

Special parameters:

`=fqdn'
     Fully qualified domain name.

`=hostname'
     Hostname.

`=domainname'
     Domainname.

`=hostsdomain'
     Domain for entries in `hosts' config files.


File: fidogate.info,  Node: ftnhatch,  Next: ftnin,  Prev: ftnconfig,  Up: Programs

ftnhatch -- Hatch new file into file echo
=========================================

Usage:

     ftnhatch  [-options]  area  file  "description"

Options:

`-b --fareas-bbs NAME'
     Use alternate FAREAS.BBS.


File: fidogate.info,  Node: ftnin,  Next: ftninpost,  Prev: ftnhatch,  Up: Programs

ftnin -- Frontend for `ftn2rfc'
===============================

Usage:

     ftnin  [-options]

Options:

`-n --no-toss'
     Don't call `ftn2rfc' for processing.

`-x --exec-program SCRIPT'
     Execute SCRIPT after `ftn2rfc' processing, typically
     `%L/ftninpost'.

   All standard options are passed to the called `ftn2rfc'.

   `ftnin' looks for mail packets addressed to the gateway addresses
(all `Address' statements in `config') and calls `ftn2rfc' for each
packet.


File: fidogate.info,  Node: ftninpost,  Next: ftninrecomb,  Prev: ftnin,  Up: Programs

ftninpost -- Mail/News Processing Script
========================================

Usage:

     ftninpost  [-options]

   This script is run by `ftn2rfc' or `ftnin', feeding the output in
SPOOLDIR/in/mail and SPOOLDIR/in/news to `sendmail' and `rnews',
respectively.


File: fidogate.info,  Node: ftninrecomb,  Next: ftnlock,  Prev: ftninpost,  Up: Programs

ftninrecomb -- Mail/News Recombining Script
===========================================

Usage:

     ftninrecomb  [-options]

   If `FTNInRecombine' is enabled in `config.gate', this script wil be
run by `ftninpost' to recombine split messages.


File: fidogate.info,  Node: ftnlock,  Next: ftnlog,  Prev: ftninrecomb,  Up: Programs

ftnlock -- Create/Remove Lock Files
===================================

Usage:

     ftnlock  [-options]  [NAME]  [ID]

Options:

`-l --lock'
     Create lock file NAME, fail if it already exists (exit code=2). If
     NAME is not specified, the default `ftnlock' is used. The optional
     parameter ID specifies the contents of the lock file, the default
     is `-none-'.

`-u --unlock'
     Remove lock file NAME.

`-w --wait'
     Wait while creating lock file. Default: immediately return, if the
     lock file can't be created because it already exists.

   Lock files are created as SPOOLDIR/locks/NAME.


File: fidogate.info,  Node: ftnlog,  Next: ftnpack,  Prev: ftnlock,  Up: Programs

ftnlog -- Write Message to Log File
===================================

Usage:

     ftnlog  [-options]  message text

Options:

`-p --program NAME'
     Set program name for logging.

   This program is used to write a log message from a shell script. The
log file name may be specified with the `LOGFILE' environment variable.


File: fidogate.info,  Node: ftnpack,  Next: ftnroute,  Prev: ftnlog,  Up: Programs

ftnpack -- Pack FTN ArcMail Packets
===================================

Usage:

     ftnpack  [-options]  [packet ... ]

Options:

`-B --binkley dir'
     Set Binkley outbound directory.

`-f --ffx Z:N/F.P'
     Pack ffx control and data files for FTN address Z:N/F.P. You must
     also set the appropiate input directory with the `-I' option.

`-F --file-dir dir'
     Sets directory, where `ftnpack' looks for file attachments. Should
     be the appropiate inbound directory, see also the `runtoss'
     script. If this option is not specified, no file attachments are
     processed.

     If `-F /' is specified, `ftnpack' accepts a complete path name in
     the subject and doesn't search the directory. Warning: this option
     compromises security to some degree, because it allows any user to
     send any file readable by the user id running the tosser and
     mailer!!!

`-g --grade grade'
     Only process packets with grade (single letter).

`-I --in-dir dir'
     Set input directory. Default: SPOOLDIR/toss/out

`-O --out-dir dir'
     Set directory for temporary packets. Default: SPOOLDIR/toss/pack.
     This is the directory, where packets to be put into arcmail
     archives will be created.

`-l --lock-file'
     Create lock file while processing.

`-m --maxarc size'
     Set maximum size of an archive to size KByte. If an existing
     ArcMail archive exceeds this size, `ftnpack' creates a new one.

`-p --packing-file name'
     Read alternate `packing' config file. Default: LIBDIR/packing

`-P --pkt'
     Process *.pkt files in the input directory. Default: output files
     of `ftnroute'.


File: fidogate.info,  Node: ftnroute,  Next: ftnseq,  Prev: ftnpack,  Up: Programs

ftnroute -- Route FTN Mail Packets
==================================

Usage:

     ftnroute  [-options]  [packet ... ]

Options:

`-g --grade grade'
     Only process packets with grade (single letter).

`-I --in-dir name'
     Set input directory. Default: SPOOLDIR/toss/tmp

`-O --out-dir name'
     Set output directory. Default: SPOOLDIR/toss/out

`-l --lock-file'
     Create lock file while processing.

`-r --routing-file name'
     Read alternate `routing' config file. Default: LIBDIR/routing

`-M --maxopen n'
     Set maximum number of concurrently open packet filess to n.
     Default: 10 (`MAXOPENFILES' from `config.h')


File: fidogate.info,  Node: ftnseq,  Next: ftntick,  Prev: ftnroute,  Up: Programs

ftnseq -- Command Line Interface to Sequencer Files
===================================================

Usage:

     ftnseq  [-options]  sequencer

   This utilitity increments the named sequencer file outputs the
resulting value to standard output. Useful for accessing FIDOGATE
sequencer files from perl and shell scripts.


File: fidogate.info,  Node: ftntick,  Next: ftntoss,  Prev: ftnseq,  Up: Programs

ftntick -- Process incoming file echos
======================================

Usage:

     ftntick  [-options]

Options:

`-b --fareas-bbs file'
     Use alternate FAREAS.BBS.

`-I --inbound dir'
     Use alternate inbound directory.

`-t --insecure'
     Insecure processing, do TIC files without password.


File: fidogate.info,  Node: ftntoss,  Next: ftnfattach,  Prev: ftntick,  Up: Programs

ftntoss -- Toss FTN Mail Packets
================================

Usage:

     ftntoss  [-options]  [packet ... ]

Options:

`-d --no-dupecheck'
     Disabled dupe check (if `DupeCheck' is enabled in `config.main').

`-g --grade grade'
     Only process packets with grade (single letter).

`-I --in-dir name'
     Set input directory. Default: SPOOLDIR/toss/in

`-O --out-dir name'
     Set output directory. Default: SPOOLDIR/toss/tmp

`-l --lock-file'
     Create lock file while processing.

`-t --insecure'
     Insecure EchoMail tossing, don't check sender against nodes listed
     in AREAS.BBS.

`-n --toss-all'
     Toss all EchoMail, even messages not addressed to one of our own
     AKAs (most probably routed EchoMail).

`-n --passthru'
     Make all areas passthru (see also `#' in areas.bbs).

`-r --routing-file name'
     Read alternate `routing' config file. Default: LIBDIR/routing

`-s --strip-attribute'
     Strip Hold and Crash attribute from incoming NetMails.

`-m --maxmsg n'
     Flush/close all output packet files after reading n messages.

`-x --maxmsg-exit n'
     Flush/close all output packet files after reading n messages and
     processing the current input packet, then exit.

`-M --maxopen n'
     Set maximum number of concurrently open packet filess to n.
     Default: 10 (`MAXOPENFILES' from `config.h')


File: fidogate.info,  Node: ftnfattach,  Next: pktdebug,  Prev: ftntoss,  Up: Programs

ftnfattach -- Outbound file attaches
====================================

Usage:

     ftnfattach  [-options]  Z:N/F.P  file ...

Options:

`-B --binkley name'
     Set Binkley outbound directory.

`-F --flavor name'
     Set flavor of outbound FLO file to name: `Hold', `Normal',
     `Direct', or `Crash'.

   The file name may start with `^' or `#', indicating that the file
should be deleted or truncated, respectively, after sending.


File: fidogate.info,  Node: pktdebug,  Next: rfc2ftn,  Prev: ftnfattach,  Up: Programs

pktdebug -- FTN mail packet debugger
====================================

Usage:

     pktdebug  [-options]  file ...

Options (standard options not supported):

`-m --msg-header'
     Print message header.

`-t --msg-text'
     Print message text. Implies `-m'.

`-v --verbose'
     Increase verbose/debug level.

`-h --help'
     Help on `pktdebug' usage.

   This utility displays the packet header and optionally the message
header and message body contents.

   See also the `util/pktmore' utitility, which pipes the output of
`pktdebug' to `$PAGER'.


File: fidogate.info,  Node: rfc2ftn,  Next: rundf,  Prev: pktdebug,  Up: Programs

rfc2ftn -- Internet-FTN Gateway
===============================

Usage:

     rfc2ftn  [-options]  [address ...]

Options:

`-b --news-batch'
     Process news batch (implies `-n').

`-B --binkley name'
     Set Binkley outbound directory.

`-i --ignore-registration'
     Do not bounce mail to FTN nodes not registered in HOSTS (if
     `HOSTS_RESTRICTED' in `config.h' is enabled).

`-n --news-mode'
     Process news message in stdin. Default: mail

`-o --out-packet-file  name'
     Write output to FTN packet file name.

`-O --out-packet-dir  name'
     Set output directory for FTN packets. Default: SPOOLDIR/out

`-t --to'
     Get recipient addresses from To, Cc, Bcc headers instead of
     command line.

`-w --write-outbound  flav'
     Write output directly to Binkley .?UT packets in outbound.

`-W --write-crash'
     Write only crash mail directly to Binkley .CUT file.


File: fidogate.info,  Node: rundf,  Next: runin,  Prev: rfc2ftn,  Up: Programs

rundf -- Script for Checking Free Disk Space
============================================

Usage:

     rundf  dir

No options.

   This shell script returns the free disk space (kB) of the file system
containing dir. It is called by `runtoss' for the directories
`OUTBOUND' and `SPOOLDIR'.

   As distributed with FIDOGATE this script requires `df' from the GNU
file utilities. If you don't have this one, you must adapt
`src/rundf.sh' to the output of your `df'.


File: fidogate.info,  Node: runin,  Next: runout,  Prev: rundf,  Up: Programs

runin -- Script for Processing Inbound Packets
==============================================

Usage:

     runin

No options.

   Runs the tosser for the inbound directories:

   * Unpacking ArcMail archives from the insecure inbound (`rununpack')

   * Tossing packets from the insecure inbound (`runtoss')

   * Unpacking ArcMail archives from the protected inbound (`rununpack')

   * Tossing packets from the protected inbound (`runtoss')

   All log messages are written to LIBDIR/log-in.

   Edit this script (`src/runin.sh') to meet your local requirements.


File: fidogate.info,  Node: runout,  Next: runtoss,  Prev: runin,  Up: Programs

runout -- Script for Processing Gateway Output Packets
======================================================

Usage:

     runout

No options.

   Runs the tosser for the gateway output directory, all log messages
are written to LIBDIR/log-out.

   Edit this script (`src/runout.sh') to meet your local requirements.


File: fidogate.info,  Node: runtoss,  Next: rununpack,  Prev: runout,  Up: Programs

runtoss -- Script for Running Tosser
====================================

Usage:

     runtoss  type

No options.

Types:

   Please the the script source code (`src/runtoss.sh') for available
type parameters and feel free to adapt it to your requirements.


File: fidogate.info,  Node: rununpack,  Next: sumcrc,  Prev: runtoss,  Up: Programs

rununpack -- Script for Unpacking ArcMail Archives
==================================================

Usage:

     rununpack  type

No options.

Types:

   Please the the script source code (`src/rununpack.sh') for available
type parameters and feel free to adapt it to your requirements.

   It requires the `file' command and the following definitions in
LIBDIR`/magic' to work properly (done by make install):

     # ----- Archiver ----------------------------------
     0       string          PK              ZIP Archive
     0       byte            0x1a            ARC Archive
     2       string          -lh             LHA Archive
     0       string          ZOO             ZOO Archive
     0       short           0xea60          ARJ Archive
     0       short           0x60ea          ARJ Archive

   Edit the script (`src/rununpack.sh') if necessary, changing unpacker
names. The required programs are `unzip', `unarj', `lha'(`rc'), `zoo',
`arc'.


File: fidogate.info,  Node: sumcrc,  Next: Config files,  Prev: rununpack,  Up: Programs

sumcrc -- CRC Checksum Utility
==============================

Usage:

     sumcrc  [-options]  file ...

Options (standard options not supported):

`-1 --skip-first-line'
     Skip first line in file. Useful for computing nodelist CRC.

`-3 --crc32'
     Compute 32 bit CRC checksum, using the standard 32 bit polynomial
     (same as in ZModem, ZIP). Default: 16 bit CRC CCITT polynomial.

`-6 --crc16'
     Use alternate 16 bit CRC16 polynomial.

`-x --hex'
     Output CRC value in hex. Default: decimal

`-z --eof-at-ctrl-z'
     The Ctrl-Z character (`^Z') indicates end-of-file (MSDOS kludge).

`-v --verbose'
     Increase verbose/debug level.

`-h --help'
     Help on `sumcrc' usage.

   Use `sumcrc -1z' to compute the checksum for a standard FIDO
nodelist.


File: fidogate.info,  Node: Config files,  Next: Config,  Prev: sumcrc,  Up: Top

FIDOGATE Config Files
*********************

FIDOGATE uses the following config files:

* Menu:

* Config::      `config.*' configuration files
* Hosts::       `hosts' FTN address to host name conversion
* Aliases::     `aliases' user aliases
* Areas::       `areas' FTN area to newsgroup conversion
* Bounce::      Bounce messages of `ftn2rfc'
* Passwd::      `passwd' password config file
* Routing::     `routing' file for `ftntoss' and `ftnroute'
* Packing::     `packing' file for `ftnpack'
* Areas.bbs::   `areas.bbs' EchoMail distribution

   For all config files, a line starting with (some white space and)
`#' character is a comment and as well as an empty line completely
ignored.

   All config files (with the execption of `areas.bbs' support an
`include' command for reading in other config files. `include' must be
the first keyword on the line, the filename is the next argument.

   All options and config statements which take file or directory names
as arguments accept the following `%' abbreviations:

`%C'
     CONFIGDIR

`%L'
     LIBDIR

`%N'
     BINDIR

`%G'
     LOGDIR

`%V'
     VARDIR

`%K'
     LOCKDIR

`%S'
     SPOOLDIR

`%B'
     BTBASEDIR

`%I'
     INBOUND

`%P'
     PINBOUND

`%U'
     UUINBOUND

