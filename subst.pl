#!/usr/bin/perl
#
# $Id: subst.pl,v 4.4 1998/01/18 10:57:55 mj Exp $
#
# Substitute directory names for FIDOGATE scripts
#

if($#ARGV < 0) {
    print STDERR
	"usage:   subst.pl [-p] [-c config.make] [-v] [-h] [-HC] source ...\n",
	"\n",
	"options:   -p              replace 1st line with \#!PERL\n",
	"           -c config.make  use specified config.make\n",
	"           -v              verbose\n",
	"           -h              generate paths.h\n",
	"           -H              generate cf_funcs.h\n",
	"           -C              generate cf_funcs.c\n",
	"           -A              generate cf_abbrev.c\n",
	"           -E              generate cf_env.c\n";
    exit 1;
}


require "getopts.pl";
&Getopts('pc:vhHCAE');

$config = $opt_c ? $opt_c : "config.make";



##### Write cf_funcs.h #######################################################

sub cf_funcs_h {
    local($key) = @_;

    $lkey = $key;
    $lkey =~ tr/A-Z/a-z/;

    print
	"char *cf_p_$lkey(void);\n",
	"char *cf_s_$lkey(char *);\n";
}



##### Write cf_funcs.c #######################################################

sub cf_funcs_c {
    local($key) = @_;

    $lkey = $key;
    $lkey =~ tr/A-Z/a-z/;

    print
	"/***** $key *****/\n";
    print
	"static char *cf_p_s_$lkey(char *s)\n",
	"{\n",
	"    static char *pval = NULL;\n",
	"    if(s)\n",
	"        pval = strsave(s);\n",
	"    if(! pval)\n",
	"    {\n",
	"	if( ! (pval = cf_get_string(\"$key\", TRUE)) )\n",
	"	    pval = DEFAULT_$key;\n",
	"	debug(8, \"config: $key %s\", pval);\n",
	"    }\n",
	"    return pval;\n",
	"}\n",
	"char *cf_p_$lkey(void)\n",
	"{\n",
	"    return cf_p_s_$lkey(NULL);\n",
	"}\n",
	"char *cf_s_$lkey(char *s)\n",
	"{\n",
	"    return cf_p_s_$lkey(s);\n",
	"}\n\n";
}



##### Write cf_env.c #########################################################

sub cf_env_c {
    local($key) = @_;

    $lkey = $key;
    $lkey =~ tr/A-Z/a-z/;

    print
	"    if( (p = getenv(\"FIDOGATE_$key\")) )\n",
	"        cf_s_$lkey(p);\n";
}



##### Main ###################################################################

# Read config.make
open(P, "$config") || die "can't open config.make\n";

undef %macros;

while(<P>) {
    chop;
    next if( /^\s\#/ );
    s/\#.*$//;

    if( /^\s*DEFAULT_([A-Z0-9_]+)\s*=\s*(.*)\s*$/ ) {
	print "subst: $1=$2\n" if($opt_v);
	$macros{$1} = $2;
    }

    if( /^\s*ABBREV_([A-Z0-9_]+)\s*=\s*%(.)\s*$/ ) {
	print "subst: $1=%$2\n" if($opt_v);
	$abbrevs{$1} = $2;
    }

    if( /^\s*PERL\s*=\s*(.*)\s*$/ ) {
	print "subst: perl=$1\n" if($opt_v);
	$perl = $1;
#	$macros{"PERL"} = $1;
    }
}
close(P);

# Resolve macros (only 1 level allowed)
for $s (keys %macros) {
    $r = $macros{$s};
    if( $r =~ /\$\((.*)\)/ ) {
	$o = $1;
	$m = $1;
	$m =~ s/^DEFAULT_//;
	$r =~ s/\$\($o\)/$macros{$m}/;
	$macros{$s} = $r;
	print "subst: $s=$r\n" if($opt_v);
    }
}

# Compatibility with old OUTBOUND
#$macros{"OUTBOUND"} = $macros{"BTBASEDIR"} if($macros{"BTBASEDIR"});


# Write cf_funcs.h
if($opt_H) {
    print
	"/* Automatically generated by subst.pl --- DO NOT EDIT!!! */\n\n",
	"/*\n",
	" * FIDOGATE\n",
	" *\n",
	" * \$Id\$\n",
	" */\n\n";
    
    for $s (keys %macros) {
	&cf_funcs_h($s);
    }

    exit 0;
}


# Write cf_funcs.c
if($opt_C) {
    print
	"/* Automatically generated by subst.pl --- DO NOT EDIT!!! */\n\n",
	"/*\n",
	" * FIDOGATE\n",
	" *\n",
	" * \$Id\$\n",
	" */\n\n",
	"\#include \"fidogate.h\"\n\n";
    
    for $s (keys %macros) {
	&cf_funcs_c($s);
    }

    exit 0;
}


# Write paths.h
if($opt_h) {

    print
	"/* Automatically generated by subst.pl --- DO NOT EDIT!!! */\n\n",
	"/*\n",
	" * FIDOGATE\n",
	" *\n",
	" * \$Id\$\n",
	" */\n\n";

#    for $s (keys %macros) {
#	$r = $macros{$s};
#	printf "#define %-31s \"%s\"\n", $s, $r;
#    }
#    print "\n";
    for $s (keys %macros) {
	$r = $macros{$s};
	printf "#define DEFAULT_%-23s \"%s\"\n", $s, $r;
    }

    exit 0;
}

# Write cf_abbrev.c
if($opt_A) {
    print
	"/* Automatically generated by subst.pl --- DO NOT EDIT!!! */\n\n",
	"/*\n",
	" * FIDOGATE\n",
	" *\n",
	" * \$Id\$\n",
	" */\n\n";

    for $s (keys %abbrevs) {
	$ls = $s;
	$ls =~ tr/A-Z/a-z/;
	$r = $abbrevs{$s};
	printf "{ '$r', cf_p_$ls },\n", $s, $r;
    }

    exit 0;
}

# Write cf_env.c
if($opt_E) {
    print
	"/* Automatically generated by subst.pl --- DO NOT EDIT!!! */\n\n",
	"/*\n",
	" * FIDOGATE\n",
	" *\n",
	" * \$Id\$\n",
	" */\n\n";

    for $s (keys %macros) {
	&cf_env_c($s);
    }
    exit 0;
}


# perl interpreter
if($opt_p) {
    $_ = <>;
    print "#!$perl\n";
}

# Substitute
while(<>) {

    for $s (keys %macros) {
	$r = $macros{$s};
	s/<$s>/$r/g;
    }

    print;
}

exit 0;
